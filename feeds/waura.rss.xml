<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>waura's blog - waura</title><link>/</link><description></description><lastBuildDate>Sat, 14 Nov 2015 21:46:00 +0900</lastBuildDate><item><title>SwipeRefreshLayoutのsetRefreshing(true)が効かない場合の対処</title><link>/swiperefreshlayout_setrefreshing.html</link><description>&lt;p&gt;SwipeRefreshLayoutのsetRefreshing(true)は、onMeasure()が呼ばれるまでは有効にならないみたいです。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://code.google.com/p/android/issues/detail?id=77712"&gt;https://code.google.com/p/android/issues/detail?id=77712&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;このような場合、SwipeRefreshLayoutを継承して下記のようにsetRefreshingが呼ばれた時の引数の値を覚えておいて、onMesure()のタイミングでsetRefreshing()をもう一回読んであげると良いようです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// MySwipeRefreshLayout.java  &lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySwipeRefreshLayout&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;SwipeRefreshLayout&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;mMeasured&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;mPreMeasureRefreshing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MySwipeRefreshLayout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MySwipeRefreshLayout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeSet&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 14 Nov 2015 21:46:00 +0900</pubDate><guid isPermaLink="false">tag:None,2015-11-14:/swiperefreshlayout_setrefreshing.html</guid><category>Android</category></item><item><title>Rails5で取り込まれる予定のrails-apiを使ってWeb APIをつくる</title><link>/rails-api_sample.html</link><description>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;web apiを作るのに特化したrails-apiを使ってweb apiを作ってみます。&lt;br&gt;
&lt;a href="https://github.com/rails-api/rails-api"&gt;rails-api&lt;/a&gt;は、Rails5で取り込まれる予定みたいです。&lt;br&gt;
rails-apiは、web
apiを作るだけなら不要なrails要素を省いてアプリを作成することができます。&lt;br&gt;
Web
APIオンリーでフロントエンドは、別のフレームワーク等を使って開発する場合などに使用すると良いのではないでしょうか。&lt;br&gt;
今回は、問い合わせるとjsonを返すだけの単純なGETメソッドのAPIを作成してみます。&lt;/p&gt;
&lt;h2&gt;rails-apiのインストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gem install rails-api  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;rails-apiのディレクトリを作成&lt;/h2&gt;
&lt;p&gt;今回は、sample_apiという名前で作成してみました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rails-api new sample_api  
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ModelとControllerの作成&lt;/h2&gt;
&lt;p&gt;rails-apiでは、Viewを使わないのでModelとControllerだけ作成します。&lt;br&gt;
ここでは、Model名とController名はそれぞれBookとbooksとしておきます。&lt;br&gt;
自分で作成する場合は、好きな名前にしてください。&lt;/p&gt;
&lt;h3&gt;Modelの作成&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./bin/rails g model Book name:string  
$ ./bin/rake db:migrate  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Controllerの作成&lt;/h3&gt;
&lt;p&gt;Controllerは、バージョニングできるようにバージョン名でディレクトリを振り分けて配置しています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./bin/rails g …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 31 Oct 2015 19:54:00 +0900</pubDate><guid isPermaLink="false">tag:None,2015-10-31:/rails-api_sample.html</guid><category>Rails</category><category>Ruby</category></item><item><title>2008年と2015年に組んだ省電力サーバーのベンチマーク比較</title><link>/atom330_vs_athlon5350_benchmark.html</link><description>&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;サーバーを新しく組んだので、ベンチマークの比較をしてみます。&lt;br&gt;
比較対象サーバーの構成の比較は下記のとおりです。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;th align="left"&gt;2008年&lt;/th&gt;
&lt;th align="left"&gt;2015年&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;CPU&lt;/td&gt;
&lt;td align="left"&gt;Intel Atom330&lt;/td&gt;
&lt;td align="left"&gt;AMD Athlon5350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;メモリ&lt;/td&gt;
&lt;td align="left"&gt;DDR2-800 2GB&lt;/td&gt;
&lt;td align="left"&gt;DDR3-1600 16GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ベンチマークソフトは&lt;a href="https://code.google.com/p/byte-unixbench/"&gt;unixbench&lt;/a&gt;を使用します。&lt;/p&gt;
&lt;h2&gt;Atom330とAthlon5350のスペック比較&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;&lt;/th&gt;
&lt;th align="right"&gt;Atom330&lt;/th&gt;
&lt;th align="right"&gt;Athlon5350&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;周波数&lt;/td&gt;
&lt;td align="right"&gt;1.6GHz&lt;/td&gt;
&lt;td align="right"&gt;2.05GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;L1 cache&lt;/td&gt;
&lt;td align="right"&gt;64 KB (code) / 48 KB (data)&lt;/td&gt;
&lt;td align="right"&gt;128 KB (code) / 128 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;(data)&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;L2 cache&lt;/td&gt;
&lt;td align="right"&gt;1024KB&lt;/td&gt;
&lt;td align="right"&gt;2048KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;TDP&lt;/td&gt;
&lt;td align="right"&gt;8W&lt;/td&gt;
&lt;td align="right"&gt;25W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;実Core数&lt;/td&gt;
&lt;td align="right"&gt;2 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 25 May 2015 20:44:00 +0900</pubDate><guid isPermaLink="false">tag:None,2015-05-25:/atom330_vs_athlon5350_benchmark.html</guid><category>unixbench</category><category>ベンチマーク</category><category>省電力サーバー</category><category>自宅サーバー</category></item><item><title>だれでも組める！ 省電力かつ実用的な自宅サーバー 2015年版</title><link>/echo_home_server_2015.html</link><description>&lt;h2&gt;なぜ自宅サーバーか？&lt;/h2&gt;
&lt;p&gt;「自宅サーバーではなく、VPSを利用すれば安くサーバーを使えるのでは？」と思われる方も多いかと思います。&lt;br&gt;
たしかに、VPSをレンタルすれば安い費用でサーバーを利用でき、さらに「初期投資が不必要」「サーバーの電気代がかからない」というメリットがあります。&lt;br&gt;
しかし、自分はファイルサーバーにも使用したいのでファイルを手元に置いておける自宅サーバーを使用することにします。&lt;/p&gt;
&lt;h2&gt;どんなサーバーを組むのか？&lt;/h2&gt;
&lt;p&gt;どんなサーバーを組むのかによって、重視するポイントが変わってきます。&lt;br&gt;
自分は下のような用途でサーバーを使用します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Webサーバー&lt;/li&gt;
&lt;li&gt;ビルドサーバー&lt;/li&gt;
&lt;li&gt;ファイルサーバ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ビルドサーバー用途からなるべくCPU性能がいい方がいいし、メモリーも多い方がいい。&lt;br&gt;
また、ファイルサーバにも使うのでディスク容量もたくさん欲しい。自宅にサーバーを置くので電気代はあまりかからない方がいい。&lt;br&gt;
...と、要は性能はなるべく高く、かつ電気代はなるべく安くとないものねだりになってしまいした。&lt;br&gt;
というわけで今回は、通常のデスクトップPCよりは低消費電力かつ、サーバーの用途に支障をきたさない程度のサーバーの構成を考えてみたいと思います。&lt;/p&gt;
&lt;h2&gt;PCパーツの選択&lt;/h2&gt;
&lt;p&gt;サーバーを建てるには、以下のパーツを用意する必要があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;マザーボード&lt;/li&gt;
&lt;li&gt;メモリー&lt;/li&gt;
&lt;li&gt;HDDまたはSSD&lt;/li&gt;
&lt;li&gt;電源&lt;/li&gt;
&lt;li&gt;PCケース&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自分は、電源とPCケースは持ってるもの使用するので、ここではCPU、メモリーとHDD(SSD)を選んで行きます。&lt;/p&gt;
&lt;h3&gt;CPU&lt;/h3&gt;
&lt;p&gt;今現在、デスクトップ向けで低消費電力かつそこそこの性能のCPUは、IntelのCelenron
J1900やPentium …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 25 Apr 2015 19:58:00 +0900</pubDate><guid isPermaLink="false">tag:None,2015-04-25:/echo_home_server_2015.html</guid><category>サーバー管理</category></item><item><title>Android Studioで作成したプロジェクトをJenkinsでビルドする</title><link>/201305181368891937.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Android%20Studio"&gt;AndroidStudio&lt;/a&gt;のプロジェクトはgradleベースなので簡単にJenkinsでビルドすることができます。&lt;br&gt;
以下、ビルドするために行った手順です。&lt;/p&gt;
&lt;h4&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Android"&gt;Android&lt;/a&gt; &lt;a href="http://d.hatena.ne.jp/keyword/SDK"&gt;SDK&lt;/a&gt;をインストールする&lt;/h4&gt;
&lt;p&gt;[Jenkinsの管理]-&amp;gt;[システムの設定]で環境変数$ANDROID_HOEMを追加して、値にAndroid SDKをインストールしたディレクトリへのパスを入力する&lt;/p&gt;
&lt;h4&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Android%20Studio"&gt;Android Studio&lt;/a&gt;で作成したプロジェクトをgit等に追加する&lt;/h4&gt;
&lt;h4&gt;Jenkinsの設定&lt;/h4&gt;
&lt;p&gt;[Jenkinsの管理]-&amp;gt;[プラグインの管理]からJenkins
Gradle pluginをインストールする。&lt;br&gt;
[Jenkinsの管理]-&amp;gt;[システムの設定]-&amp;gt;[Gradle]&lt;br&gt;
Gradle追加ボタンを押して、下記のように選択する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name : Gradle 1.6&lt;/li&gt;
&lt;li&gt;自動インストール : チェックあり&lt;/li&gt;
&lt;li&gt;インストーラの追加：Install
    from Gradle.org&lt;/li&gt;
&lt;li&gt;バージョン : Gradle 1.6&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Jenkins ジョブの作成&lt;/h4&gt;
&lt;p&gt;ジョブの設定から[ビルド]-&amp;gt;[ビルド手順の追加]を押してInvoke Gradlescriptを選択する。&lt;br&gt;
Invoke …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 18 May 2013 00:45:00 +0900</pubDate><guid isPermaLink="false">tag:None,2013-05-18:/201305181368891937.html</guid></item><item><title>Androidアプリを複数のプロジェクトに分割して開発する時の設定</title><link>/201210011349098138.html</link><description>&lt;p&gt;eclipseのプロジェクトのプロパティから「Java Build Path」や「Project References」を設定してみたら、ビルドは通るが実行時にClassNotFoundExceptionが出て上手くいかなかった。&lt;/p&gt;
&lt;p&gt;正しくは、プロジェクトのプロパティの「Android」を選んでLibraryの設定をするようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;呼び出される側のプロジェクトはIs Libraryにチェックを入れる。&lt;/li&gt;
&lt;li&gt;呼び出す側のプロジェクトはAddから呼び出すプロジェクトを選択する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、AndroidManifest.xmlに呼び出す側のActivityなりServiceなりを下記のように書いておく必要がある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;・・・
&amp;lt;service android:name=&amp;quot;key0note.GoogleReaderWidget.GoogleReaderWidgetDataService&amp;quot; /&amp;gt;
・・・
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;参考リンク&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://tmpla.info/archives/1211"&gt;http://tmpla.info/archives/1211&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 01 Oct 2012 22:28:00 +0900</pubDate><guid isPermaLink="false">tag:None,2012-10-01:/201210011349098138.html</guid></item><item><title>SSE用いたアルファブレンドの高速化4 アライメントがずれている画像同士のアルファブレンド</title><link>/201112031322919731.html</link><description>&lt;p&gt;↓の続き  &lt;/p&gt;
&lt;p&gt;&lt;a href="./200909141252931917.html"&gt;SSE用いたアルファブレンドの高速化&lt;/a&gt;
&lt;a href="./201003201269074009.html"&gt;SSE用いたアルファブレンドの高速化2&lt;/a&gt;
&lt;a href="./201111281322504210.html"&gt;SSE用いたアルファブレンドの高速化3 アルファチャンネルをもつ画像同士のアルファブレンド&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回はアライメントをずらした場合での計測をします。&lt;/p&gt;
&lt;p&gt;_mm_loadu_si128などアライメントをあわせる必要がないロード・ストア命令を使用する場合は、&lt;br&gt;
前回と同じ様に何も考えずに読み込んでアルファブレンドを行い、書きこむという順で処理を行うことができます。&lt;/p&gt;
&lt;p&gt;しかし、アライメントを合わせる必要があるロード・ストア命令を使用する場合は、&lt;br&gt;
処理方法をアライメントのズレによって変える必要があります。&lt;/p&gt;
&lt;p&gt;今回のアルファブレンド処理では、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;入出力メモリともアライメントが揃っている場合&lt;/li&gt;
&lt;li&gt;入出力メモリともアライメントから同じだけずれている場合&lt;/li&gt;
&lt;li&gt;入力、出力メモリのアライメントのずれ量が違う場合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;の3通りに分けてコードを実装しました。&lt;/p&gt;
&lt;p&gt;1の場合は、前回と同様のコードで処理します。&lt;br&gt;
2の場合は、ずれてる分を処理して入出力ともアライメントを合わせた状態にして、1と同じように処理します。&lt;br&gt;
3の場合は、ずれてる分をシフト演算を使用してずれを合わせる処理をいれて、&lt;br&gt;
ロード・ストア命令がアライメントが合った状態で実行されるようにします。&lt;/p&gt;
&lt;h4&gt;計測方法&lt;/h4&gt;
&lt;p&gt;32bit,64bit向けに2通りに実行ファイルを作成、それぞれについて&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SSEを使わない処理&lt;/li&gt;
&lt;li&gt;_mm_loadu_si128でメモリ読み込み、_mm_storeu_si128でメモリ書き込み&lt;/li&gt;
&lt;li&gt;_mm_load_si128でメモリ読み込み、_mm_store_si128でメモリ書き込み&lt;/li&gt;
&lt;li&gt;_mm_load_si128でメモリ読み込み、_mm_stream_si128でメモリ書き込み&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;の4通りの処理の処理速度を計測する。&lt;br&gt;
前回までは間違えて&lt;a href="http://d.hatena.ne.jp/keyword/%C9%E2%C6%B0%BE%AE%BF%F4"&gt;浮動小数&lt;/a&gt;点用の_mm_loadu_ps等を使っていたので、今回は_mm_loadu_si128等を使います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;チャンネルサイズ8bit
    5700x5700BGR画像を2枚読み込み、アルファ値を指定してアルファブレンドを行う。&lt;/li&gt;
&lt;li&gt;画像の保存、読み込みは …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 03 Dec 2011 22:42:00 +0900</pubDate><guid isPermaLink="false">tag:None,2011-12-03:/201112031322919731.html</guid></item><item><title>SSE用いたアルファブレンドの高速化3 アルファチャンネルをもつ画像同士のアルファブレンド</title><link>/201111281322504210.html</link><description>&lt;p&gt;↓の続き&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/hiroki0/20090914/1252931917"&gt;http://d.hatena.ne.jp/hiroki0/20090914/1252931917&lt;/a&gt;&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/hiroki0/20100320/1269074009"&gt;http://d.hatena.ne.jp/hiroki0/20100320/1269074009&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;使用するアルファブレンド計算式&lt;/h2&gt;
&lt;p&gt;チャンネルサイズ8bitとして&lt;br&gt;
&lt;img alt="a_{dst} = 255 - (255 - a_{over})(255 - a_{under}) /
255" src="http://chart.apis.google.com/chart?cht=tx&amp;amp;chl=a_%7Bdst%7D%20%3D%20255%20-%20%28255%20-%20a_%7Bover%7D%29%28255%20-%20a_%7Bunder%7D%29%20%2F%20255"&gt;&lt;br&gt;
&lt;img alt="d_{dst} = (d_{over} a_{over} + (d_{under} a_{under} (255 -
a_{over}) / 255) /
a_{dst}" src="http://chart.apis.google.com/chart?cht=tx&amp;amp;chl=d_%7Bdst%7D%20%3D%20%28d_%7Bover%7D%20a_%7Bover%7D%20%2B%20%28d_%7Bunder%7D%20a_%7Bunder%7D%20%28255%20-%20a_%7Bover%7D%29%20%2F%20255%29%20%2F%20a_%7Bdst%7D"&gt;&lt;/p&gt;
&lt;p&gt;ここで、aはアルファ値、dは画素値である。&lt;/p&gt;
&lt;p&gt;この計算式をコードにすると以下のようになる。&lt;br&gt;
255による除算は、高速化のために256の除算に変更しシフト演算で処理している。&lt;br&gt;
また、計算量を減らすためにアルファ値により分岐を行なっている。&lt;br&gt;
今回は、この処理をSSEにより実装して計測を行う。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;over_pix&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;under_pix&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;dst_pix&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;over_pix&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;over_pix&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;dst_pix&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;under_pix&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 28 Nov 2011 03:16:00 +0900</pubDate><guid isPermaLink="false">tag:None,2011-11-28:/201111281322504210.html</guid></item><item><title>TI-Android-Froyo-DevKit-V2.2のビルドでinternal_install_SDK.expが見つからないとエラーが出るときの対処</title><link>/201106061307361103.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./internal_install_SDK.exp: コマンドが見つかりませんでした
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とエラーがでる場合は次のようにして、expectパッケージをインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install expect
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 06 Jun 2011 20:51:00 +0900</pubDate><guid isPermaLink="false">tag:None,2011-06-06:/201106061307361103.html</guid></item><item><title>wintabから傾きを取得するコード</title><link>/201012241293217750.html</link><description>&lt;p&gt;&lt;a href="http://f.hatena.ne.jp/hiroki0/20101225035447"&gt;&lt;img alt="f:id:hiroki0:20101225035447j:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20101225/20101225035447.jpg" title="f:id:hiroki0:20101225035447j:image"&gt;&lt;/a&gt;
Azimuthがペンとタブレットの前後方向の軸がなす角、&lt;br&gt;
Altitudeがペンとタブレット平面がなす角です。&lt;br&gt;
ペンが逆さまのときAltitudeは負の値になります。&lt;br&gt;
矢印が向いてるほうがタブレットの上側を表しています。&lt;/p&gt;
&lt;p&gt;まず、取得するデータ型に傾きを定義するために、PK_ORIENTATIONをPACKETDATAに含めます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;wintab.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define PACKETDATA (PK_CURSOR | PK_X | PK_Y | PK_Z | PK_BUTTONS | PK_NORMAL_PRESSURE | PK_ORIENTATION)&lt;/span&gt;
&lt;span class="cp"&gt;#define PACKETMODE PK_BUTTONS&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;pktdef.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;タブレットからのデータを正規化するために、&lt;br&gt;
WTInfo関数を呼び出して、AzimuthとAltitudeの最大値を調べています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="nf"&gt;UINT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;WTInfo_&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt; &lt;span class="n"&gt;UINT&lt;/span&gt; &lt;span class="n"&gt;wCategory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UINT&lt;/span&gt; &lt;span class="n"&gt;nIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LPVOID&lt;/span&gt; &lt;span class="n"&gt;lpOutput&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;HMODULE&lt;/span&gt; &lt;span class="n"&gt;dll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoadLibrary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wintab32.dll&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;WTInfo_&lt;/span&gt; &lt;span class="n"&gt;wtInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WTInfo_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;GetProcAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dll&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;WTInfoA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;double …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Fri, 24 Dec 2010 04:09:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-12-24:/201012241293217750.html</guid></item><item><title>CPUID命令のIntrinsic関数を使用して、SSEに対応しているか調べるコード</title><link>/201011061289036459.html</link><description>&lt;p&gt;↓のコードをIntrinsic関数を使用して書き換えてみます。&lt;/p&gt;
&lt;p&gt;&lt;a href="../200909121252748821.html"&gt;CPUID命令を使用して、SSEに対応しているか調べるコード&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;__cpuid()&lt;/h4&gt;
&lt;p&gt;CPUID命令のIntrinsic関数は、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void __cpuid(
int CPUInfo[4],
int InfoType
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;です。&lt;br&gt;
InfoTypeで数値を指定して、対応した情報がCPUInfoに入ります。&lt;br&gt;
今回はSSEの対応情報を調べるので、InfoTypeには 1を入れます。&lt;/p&gt;
&lt;p&gt;先頭をbit0として、次のように対応情報が格納され、&lt;br&gt;
対応している場合はbitが1になっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPUInfo[3] bit23
    &lt;a href="http://d.hatena.ne.jp/keyword/MMX"&gt;MMX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CPUInfo[3] bit25 SSE&lt;/li&gt;
&lt;li&gt;CPUInfo[3] bit26
    &lt;a href="http://d.hatena.ne.jp/keyword/SSE2"&gt;SSE2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CPUInfo[2] bit0
    &lt;a href="http://d.hatena.ne.jp/keyword/SSE3"&gt;SSE3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CPUInfo[2] bit19 SSE4.1&lt;/li&gt;
&lt;li&gt;CPUInfo[2] bit20 SSE4.2
:::&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;コード&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;intrin …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 06 Nov 2010 18:40:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-11-06:/201011061289036459.html</guid></item><item><title>CUDA VS Wizardで作ったプロジェクトにインクルードパスを追加する</title><link>/201006201277015164.html</link><description>&lt;ul&gt;
&lt;li&gt;プロジェクトのプロパティを開く&lt;/li&gt;
&lt;li&gt;CUDA Build Ruleを選択&lt;/li&gt;
&lt;li&gt;General選択&lt;/li&gt;
&lt;li&gt;Additional Include Directoriesにパスを追加&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 20 Jun 2010 15:26:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-06-20:/201006201277015164.html</guid></item><item><title>UbuntuにMozcのインストール</title><link>/201006061275834228.html</link><description>&lt;p&gt;Google日本語入力のオープンソース版であるMozcが公開されています。&lt;br&gt;
Webデータから抽出された語嚢データは含まれていないようです。&lt;br&gt;
&lt;a href="http://code.google.com/p/mozc/"&gt;http://code.google.com/p/mozc/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;このMozcのUbuntu用の野良パッケージを作成してくれている方がいたのでインストールしてみました。&lt;br&gt;
&lt;a href="http://linux.ikoinoba.net/index.php?UID=1273605455"&gt;Mozc - Google日本語入力のオープンソース版 -
憩いの場【Linux/ソフト紹介】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;インストール方法は、すべて↑の通り。&lt;br&gt;
Anthyは使いにくいなぁ、と思っていたので助かりました。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 06 Jun 2010 23:23:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-06-06:/201006061275834228.html</guid></item><item><title>まるごと吸い出したHDDイメージをマウントする</title><link>/201004091270823038.html</link><description>&lt;p&gt;ddなどでHDD全体をイメージファイルにした場合は、そのままマウントすることが出来ないので以下の手順でマウントを行う。&lt;/p&gt;
&lt;p&gt;まずは、HDDディスクイメージをループバックデバイスに結びつける。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo losetup /dev/loop0 hdd.img
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次に、fdiskでパーティション構成を出力。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo fdisk /dev/loop0 -lu
Disk /dev/loop0: &lt;span class="m"&gt;4034&lt;/span&gt; MB, &lt;span class="m"&gt;4034838528&lt;/span&gt; bytes
&lt;span class="m"&gt;128&lt;/span&gt; heads, &lt;span class="m"&gt;63&lt;/span&gt; sectors/track, &lt;span class="m"&gt;977&lt;/span&gt; cylinders, total &lt;span class="m"&gt;7880544&lt;/span&gt; sectors
&lt;span class="nv"&gt;Units&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sectors of &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Disk identifier: 0x001c2022
Device Boot      Start         End      Blocks   Id …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Fri, 09 Apr 2010 23:23:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-04-09:/201004091270823038.html</guid></item><item><title>Ubuntuにmrtgをインストールする。</title><link>/201004031270264748.html</link><description>&lt;p&gt;mrtgは、cronで定期的に実行され
snmpから機器の状態を取得して、HTML形式のグラフに加工し出力するツールです。&lt;br&gt;
Ubuntu serverをインストールしてあるマシンにmrtgをインストールしてグラフ表示出来るようにします。&lt;/p&gt;
&lt;h2&gt;パッケージのインストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ sudo apt-get install snmp snmpd mrtg
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;snmpd.confの編集&lt;/h2&gt;
&lt;p&gt;コミュニティ名 privateに設定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vi /etc/snmp/snmpd.conf

-com2sec paranoid default public
+#com2sec paranoid default public
+com2sec &lt;span class="nb"&gt;local&lt;/span&gt; localhost private
+group MyRWGroup any &lt;span class="nb"&gt;local&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;また、ディスク使用量を監視するために、以下のコメントアウトを外します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-#disk / 10000
+disk / 10000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;snmpdデーモンを再起動させます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ sudo /etc/init …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 03 Apr 2010 12:19:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-04-03:/201004031270264748.html</guid></item><item><title>SSE用いたアルファブレンドの高速化2</title><link>/201003201269074009.html</link><description>&lt;h2&gt;ロード・ストアに使用するSSE命令&lt;/h2&gt;
&lt;h3&gt;ロード&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;イントリンシック命令&lt;/th&gt;
&lt;th&gt;対応するSSE命令&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;_mm_loadu_ps&lt;/td&gt;
&lt;td&gt;MOVUPS&lt;/td&gt;
&lt;td&gt;アライメントを合わせる必要がない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_mm_load_ps&lt;/td&gt;
&lt;td&gt;MOVAPS&lt;/td&gt;
&lt;td&gt;アライメントを合わせなければならない&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ストア&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;イントリンシック命令&lt;/th&gt;
&lt;th&gt;対応するSSE命令&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;_mm_storeu_ps&lt;/td&gt;
&lt;td&gt;MOVUPS&lt;/td&gt;
&lt;td&gt;アライメントを合わせる必要がない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_mm_store_ps&lt;/td&gt;
&lt;td&gt;MOVAPS&lt;/td&gt;
&lt;td&gt;アライメントを合わせなければならない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_mm_stream_si128&lt;/td&gt;
&lt;td&gt;MOVNTPD&lt;/td&gt;
&lt;td&gt;アライメントを合わせなければならない、キャッシュを介さずにストアする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;計測するアルファブレンド処理&lt;/h2&gt;
&lt;p&gt;32bit,64bit向けに2通りに実行ファイルを作成、それぞれについて&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSEを使わない処理&lt;/li&gt;
&lt;li&gt;_mm_loadu_psでメモリ読み込み、_mm_storeu_psでメモリ書き込み&lt;/li&gt;
&lt;li&gt;_mm_load_psでメモリ読み込み、_mm_store_psでメモリ書き込み&lt;/li&gt;
&lt;li&gt;_mm_load_psでメモリ読み込み、_mm_stream_si128でメモリ書き込み&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の4通りでテストする。&lt;/p&gt;
&lt;p&gt;64bit向けの設定だと__asmのとこでエラーがでるので&lt;a href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%E9%A5%A4%A5%F3%A5%A2%A5%BB%A5%F3%A5%D6%A5%E9"&gt;インラインアセンブラ&lt;/a&gt;ではなく組み込み関数を使って書きました。&lt;br&gt;
アライメントをあわせて処理するために、128bit(4pixel)ずつ読み込んで処理を行っています。&lt;/p&gt;
&lt;h2&gt;計測方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;5760x3600BGR画像を2枚読み込み、アルファ値を指定してアルファブレンドを行う。&lt;/li&gt;
&lt;li&gt;画像の保存、読み込みは&lt;a href="http://d.hatena.ne.jp/keyword/openCV"&gt;openCV&lt;/a&gt;
    2 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 20 Mar 2010 17:33:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-03-20:/201003201269074009.html</guid></item><item><title>ブレークポイントがヒットしない時の対処</title><link>/201003171268808033.html</link><description>&lt;p&gt;デバック時、リビルドしたソースに&lt;a href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%EC%A1%BC%A5%AF%A5%DD%A5%A4%A5%F3%A5%C8"&gt;ブレークポイント&lt;/a&gt;を設定しても、&lt;br&gt;
「&lt;a href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%EC%A1%BC%A5%AF%A5%DD%A5%A4%A5%F3%A5%C8"&gt;ブレークポイント&lt;/a&gt;は、現在の設定ではヒットしません。&lt;a href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9"&gt;ソースコード&lt;/a&gt;
が元のバージョンと異なります。」&lt;br&gt;
と表示されるときの対処&lt;/p&gt;
&lt;p&gt;[「&lt;a href="http://d.hatena.ne.jp/keyword/%A5%C4%A1%BC%A5%EB"&gt;ツール&lt;/a&gt;」→「オプション」→「&lt;a href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0"&gt;デバッグ&lt;/a&gt;」→「全般」を開き、「元のバージョンと完全に一致するソースファイルを必要とする」のチェックをはずす。] &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.langedge.jp/blog/?&amp;amp;blogid=1&amp;amp;archive=2006-6-14"&gt;http://www.langedge.jp/blog/?&amp;amp;blogid=1&amp;amp;archive=2006-6-14&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Wed, 17 Mar 2010 15:40:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-03-17:/201003171268808033.html</guid><category>Windows</category></item><item><title>64bit対応のOpenCV 2.0のスタティックリンクライブラリのビルド</title><link>/201003151268621668.html</link><description>&lt;h4&gt;CMakeを用いて&lt;a href="http://d.hatena.ne.jp/keyword/Visual%20Studio"&gt;Visual Studio&lt;/a&gt;のプロジェクトを作る&lt;/h4&gt;
&lt;p&gt;ここを参考に&lt;a href="http://d.hatena.ne.jp/keyword/OpenCV"&gt;OpenCV&lt;/a&gt;のソースから&lt;a href="http://d.hatena.ne.jp/keyword/Visual%20Studio"&gt;Visual
Studio&lt;/a&gt;のプロジェクトを作成する。&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/Guernsey/20091002/1254459730"&gt;http://d.hatena.ne.jp/Guernsey/20091002/1254459730&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;「アプリケーションを正しく初期化できませんでした
(0xc0150002)」というエラーダイアログがでないようにするためにCMakeのConfigure時にでENABLE_OPENMPを外す。&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/Guernsey/20091120/1258734848"&gt;http://d.hatena.ne.jp/Guernsey/20091120/1258734848&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;スタティックリンクライブラリをビルドするために&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;「構成プロパティ」→「全般」で「構成の種類」をダイナミックライブラリからスタティックライブラリに変更する&lt;/li&gt;
&lt;li&gt;DllMain()を&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%E1%A5%F3%A5%C8%A5%A2%A5%A6%A5%C8"&gt;コメントアウト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/keyword/opencv"&gt;opencv&lt;/a&gt;-1.1preからvideoInput.libをリンクさせる&lt;/li&gt;
&lt;li&gt;atlthunk.libが見つからないとリンクエラーが出たらatlthunk.libを無視&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;64bit対応にするために&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;すべてのプロジェクトのプロパティの「構成プロパティ」→「&lt;a href="http://d.hatena.ne.jp/keyword/C/C%2B%2B"&gt;C/C …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 15 Mar 2010 11:54:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-03-15:/201003151268621668.html</guid></item><item><title>64bit版のWintab DLLのロード</title><link>/201003141268524584.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%D6%A5%EC%A5%C3%A5%C8"&gt;タブレット&lt;/a&gt;の情報を取得するのに、以下のようにWintabのDLLを使用している。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LoadLibrary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wintab32.dll&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;wintab32.dllという名前なのでこのDLLは32bit用で、64bitのexeから呼び出すには64bit用のDLLを読み込まないとダメだと思い、それらしいものを探してみるがどこにも見当たらない。&lt;/p&gt;
&lt;p&gt;この記事によると、OSが同じ名前のDLLを32bit用と64bit用で切り替えてくれるようだ。&lt;br&gt;
[http://kait-field.spaces.live.com/Blog/cns!B90E9B4A3C4DFD66!889.entry?wa=wsignin1.0&amp;amp;sa=838339906]&lt;/p&gt;
&lt;p&gt;なので、64bit版の方でもwintab32.dllを読み込めばいいということらしい。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 14 Mar 2010 08:56:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-03-14:/201003141268524584.html</guid></item><item><title>C言語、32bit環境と64bit環境の変数のサイズ</title><link>/201003131268457303.html</link><description>&lt;ul&gt;
&lt;li&gt;OS: &lt;a href="http://d.hatena.ne.jp/keyword/Windows%207"&gt;Windows 7&lt;/a&gt;
    64bit&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9"&gt;コンパイラ&lt;/a&gt;:
    &lt;a href="http://d.hatena.ne.jp/keyword/Visual%20Studio"&gt;Visual
    Studio&lt;/a&gt;
    2008&lt;/li&gt;
&lt;li&gt;CPU: &lt;a href="http://d.hatena.ne.jp/keyword/Core2%20Duo"&gt;Core2
    Duo&lt;/a&gt; E8400&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;32bit環境と64bit環境向けに&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB"&gt;コンパイル&lt;/a&gt;したものを実行して、sizeofでサイズを調べた。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align="right"&gt;32bit&lt;/th&gt;
&lt;th align="right"&gt;64bit&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td align="right"&gt;4&lt;/td&gt;
&lt;td align="right"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td align="right"&gt;4&lt;/td&gt;
&lt;td align="right"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long long&lt;/td&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long double&lt;/td&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;どうやら、32bit環境と64bit環境で変数サイズに違いは無いみたいだ。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 13 Mar 2010 14:15:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-03-13:/201003131268457303.html</guid></item><item><title>WH_KEYBOARDのフックプロシージャサンプル</title><link>/201003071267910248.html</link><description>&lt;p&gt;キーボードが押されてない状態から押された状態へ遷移した時と、押している状態から、押されていない状態へ遷移した時に、押されたキーの仮想コード、shift、ctrl、altのそれぞれの状態を表示するフックプロシージャのコード&lt;/p&gt;
&lt;p&gt;WH_KEYBORDのフックプロシージャは、0を返すと他のフックプシージャやウィンドウメッセージを処理するウィンドウへメッセージを渡し、0以外を返すとメッセージを渡さない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LRESULT&lt;/span&gt; &lt;span class="nf"&gt;KeyboardHookProc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WPARAM&lt;/span&gt; &lt;span class="n"&gt;wParam&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LPARAM&lt;/span&gt; &lt;span class="n"&gt;lParam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nCode&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;nCode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;HC_NOREMOVE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;CallNextHookEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_hHook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wParam&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lParam&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OutputDebugString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keyboard hook! &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;lParam&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xc0000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0xc0000000&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;UINT&lt;/span&gt; &lt;span class="n"&gt;optChar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//check keyup shift&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetKeyState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VK_SHIFT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OutputDebugString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;shift &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//check keyup …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 07 Mar 2010 06:17:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-03-07:/201003071267910248.html</guid></item><item><title>開発版更新</title><link>/201003011267393466.html</link><description>&lt;ul&gt;
&lt;li&gt;ナビゲーターの画像が何もしてない時でもチカチカしてたのを修正&lt;/li&gt;
&lt;li&gt;半透明なピクセルに半透明なピクセルを書き込めないバグを修正&lt;/li&gt;
&lt;li&gt;ソフト円ブラシを追加&lt;/li&gt;
&lt;li&gt;レイヤー合成高速化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://key0note.ath.cx/hp/frayer_wiki/"&gt;http://key0note.ath.cx/hp/frayer_wiki/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://f.hatena.ne.jp/hiroki0/20100301063557"&gt;&lt;img alt="f:id:hiroki0:20100301063557j:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20100301/20100301063557.jpg" title="f:id:hiroki0:20100301063557j:image"&gt;&lt;/a&gt;
ブラシのテスト。&lt;br&gt;
黒い線がハード円ブラシ、赤い線がハードエアーブラシ、青い線がソフト円ブラシ、緑の線がソフトエアーブラシ。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 01 Mar 2010 06:44:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-03-01:/201003011267393466.html</guid></item><item><title>OpenCL開発環境のインストール</title><link>/201002231266941596.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/windows7"&gt;windows7&lt;/a&gt;
64bit、&lt;a href="http://d.hatena.ne.jp/keyword/Visual%20Studio"&gt;Visual
Studio&lt;/a&gt;
2008環境下に&lt;a href="http://d.hatena.ne.jp/keyword/OpenCL"&gt;OpenCL&lt;/a&gt;の開発環境をインストールする手順を記します。&lt;br&gt;
自分は&lt;a href="http://d.hatena.ne.jp/keyword/NVIDIA"&gt;NVIDIA&lt;/a&gt;の&lt;a href="http://d.hatena.ne.jp/keyword/GPU"&gt;GPU&lt;/a&gt;を使っているので&lt;a href="http://d.hatena.ne.jp/keyword/NVIDIA"&gt;NVIDIA&lt;/a&gt;の&lt;a href="http://d.hatena.ne.jp/keyword/OpenCL"&gt;OpenCL&lt;/a&gt;環境をインストールします。&lt;/p&gt;
&lt;h4&gt;ドライバ、&lt;a href="http://d.hatena.ne.jp/keyword/SDK"&gt;SDK&lt;/a&gt;のインストール&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://developer.nvidia.com/object/opencl.html"&gt;http://developer.nvidia.com/object/opencl.html&lt;/a&gt;&lt;br&gt;
上のNVIDIのサイトから&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/keyword/NVIDIA"&gt;NVIDIA&lt;/a&gt; Driver for
    WinVista and &lt;a href="http://d.hatena.ne.jp/keyword/Win7"&gt;Win7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/keyword/GPU%20Computing"&gt;GPU
    Computing&lt;/a&gt;
    &lt;a href="http://d.hatena.ne.jp/keyword/SDK"&gt;SDK&lt;/a&gt; code samples and
    more&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;をダウンロードしてインストールします。&lt;br&gt;
再起動が求められた場合は、再起動を行います。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/windows7"&gt;windows7&lt;/a&gt;の場合では、インクルードファイルとライブラリファイルはそれぞれ次の箇所にインストールされてました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C:\Users\(ユーザ)\AppData …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Tue, 23 Feb 2010 01:13:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-02-23:/201002231266941596.html</guid></item><item><title>円描画のアンチエイリアス</title><link>/201002141266161163.html</link><description>&lt;p&gt;円描画時の&lt;a href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9"&gt;アンチエイリアス&lt;/a&gt;のかけ方のテスト&lt;br&gt;
&lt;a href="http://f.hatena.ne.jp/hiroki0/20100215002421"&gt;&lt;img alt="f:id:hiroki0:20100215002421p:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20100215/20100215002421.png" title="f:id:hiroki0:20100215002421p:image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ついでにブラシ描画のテスト&lt;br&gt;
&lt;a href="http://f.hatena.ne.jp/hiroki0/20100215002422"&gt;&lt;img alt="f:id:hiroki0:20100215002422p:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20100215/20100215002422.png" title="f:id:hiroki0:20100215002422p:image"&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 14 Feb 2010 00:26:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-02-14:/201002141266161163.html</guid></item><item><title>ローカルフック使用時にはスレッドIDが必要</title><link>/201002111265869988.html</link><description>&lt;p&gt;ローカルフックを作成するには、&lt;br&gt;
第3引数にNULL、第4引数にスレッドIDを指定する。&lt;/p&gt;
&lt;p&gt;対して、グローバルフックの場合は、&lt;br&gt;
第3引数にDLLモジュールのハンドル、第4引数に0を指定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//ローカルフックの作成&lt;/span&gt;
&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SetWindowsHookEx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;WH_GETMESSAGE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOOKPROC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;hookfunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetCurrentThreadId&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Thu, 11 Feb 2010 15:33:00 +0900</pubDate><guid isPermaLink="false">tag:None,2010-02-11:/201002111265869988.html</guid></item><item><title>安全なSTL listの要素削除ループ</title><link>/200911151258237873.html</link><description>&lt;p&gt;erase(itr)を呼び出すとitrは使えなくなるので、&lt;br&gt;
erase()の返り値で次の要素の&lt;a href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%C6%A5%EC%A1%BC%A5%BF"&gt;イテレータ&lt;/a&gt;を受け取りループを続行する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;itr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SampleList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;itr&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;SampleList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="err"&gt;条件&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;itr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SampleList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;itr&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 15 Nov 2009 07:31:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-11-15:/200911151258237873.html</guid></item><item><title>プロセッサ数を求めるコード</title><link>/200911141258218733.html</link><description>&lt;p&gt;GetSystemInfoでシステムの情報をSYSTEM_INFO構造体に取得すると、dwNumberOfProcessorsにプロセッサ数が入る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SYSTEM_INFO si;
GetSystemInfo(&amp;amp;si);
si.dwNumberOfProcessors; //プロセッサ数
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://msdn.microsoft.com/ja-jp/library/cc429808.aspx"&gt;http://msdn.microsoft.com/ja-jp/library/cc429808.aspx&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 14 Nov 2009 02:12:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-11-14:/200911141258218733.html</guid></item><item><title>トーンカーブ</title><link>/200909271254003613.html</link><description>&lt;p&gt;3次スプラインを利用して&lt;a href="http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%F3%A5%AB%A1%BC%A5%D6"&gt;トーンカーブ&lt;/a&gt;を実装してみた。&lt;br&gt;
&lt;a href="http://f.hatena.ne.jp/hiroki0/20090927071914"&gt;&lt;img alt="f:id:hiroki0:20090927071914j:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20090927/20090927071914.jpg" title="f:id:hiroki0:20090927071914j:image"&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 27 Sep 2009 07:20:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-09-27:/200909271254003613.html</guid><category>ペイントツール</category></item><item><title>画面の大きさを取得するWinAPI メモ</title><link>/200909231253715978.html</link><description>&lt;h2&gt;メイン画面の大きさを取得&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetSystemMetrics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SM_CXSCREEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetSystemMetrics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SM_CYSCREEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;マルチディスプレイ環境で全ての画面領域の大きさを取得&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetSystemMetrics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SM_CXVIRTUALSCREEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GetSystemMetrics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SM_CYVIRTUALSCREEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://msdn.microsoft.com/ja-jp/library/cc429812.aspx"&gt;http://msdn.microsoft.com/ja-jp/library/cc429812.aspx&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Wed, 23 Sep 2009 23:26:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-09-23:/200909231253715978.html</guid></item><item><title>OpenCVで3次スプライン補間</title><link>/200909211253548524.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/OpenCV"&gt;OpenCV&lt;/a&gt;の連立1次方程式を解くcvSolveを利用して3次のスプライン補間を行うコード。&lt;/p&gt;
&lt;h2&gt;コード&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cv.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;highgui.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetPixelToBGR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IplImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nChannels&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;b …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 21 Sep 2009 00:55:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-09-21:/200909211253548524.html</guid></item><item><title>SSE用いたアルファブレンドの高速化</title><link>/200909141252931917.html</link><description>&lt;h2&gt;計測するアルファブレンド処理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SSEを使わない処理&lt;/li&gt;
&lt;li&gt;16バイトアライメントなし、SSEを使って1pixelごとに処理&lt;/li&gt;
&lt;li&gt;16バイトアライメントなし、SSEを使って2pixelごとに処理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計測方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1920x1200BGR画像を2枚読み込み、アルファ値を指定してアルファブレンドを行う。&lt;/li&gt;
&lt;li&gt;画像の保存、読み込みは&lt;a href="http://d.hatena.ne.jp/keyword/openCV"&gt;openCV&lt;/a&gt;を用いた。&lt;/li&gt;
&lt;li&gt;アルファブレンド部分の処理のみ処理時間を計測した。&lt;/li&gt;
&lt;li&gt;処理時間の計測は以下のページにあるコードを使用した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://74.125.155.132/search?q=cache:lBJiOP0zi6MJ:clippingcutting.blogspot.com/2007_10_01_archive.html+QPCTimer+QueryPerformanceFrequency&amp;amp;cd=1&amp;amp;hl=ja&amp;amp;ct=clnk&amp;amp;gl=jp"&gt;http://74.125.155.132/search?q=cache:lBJiOP0zi6MJ:clippingcutting.blogspot.com/2007_10_01_archive.html+QPCTimer+QueryPerformanceFrequency&amp;amp;cd=1&amp;amp;hl=ja&amp;amp;ct=clnk&amp;amp;gl=jp&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;計測に使用した環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CPU: &lt;a href="http://d.hatena.ne.jp/keyword/core2duo"&gt;core2duo&lt;/a&gt;
    E8400&lt;/li&gt;
&lt;li&gt;OS: &lt;a href="http://d.hatena.ne.jp/keyword/windows%207"&gt;windows 7&lt;/a&gt;
    64bit&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9"&gt;コンパイラ&lt;/a&gt;:
    &lt;a href="http://d.hatena.ne.jp/keyword/Visual%20Studio"&gt;Visual
    Studio …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 14 Sep 2009 21:38:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-09-14:/200909141252931917.html</guid></item><item><title>インラインアセンブラでデバッグ時にレジスタの値を表示させる。</title><link>/200909131252813492.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Visual%20Studio"&gt;Visual
Studio&lt;/a&gt;で&lt;a href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF"&gt;レジスタ&lt;/a&gt;の値を表示させる。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0"&gt;デバッグ&lt;/a&gt;中に[&lt;a href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0"&gt;デバッグ&lt;/a&gt;]→[ウィンドウ]→[&lt;a href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF"&gt;レジスタ&lt;/a&gt;]で&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF"&gt;レジスタ&lt;/a&gt;ウィンドウを開く。&lt;/p&gt;
&lt;p&gt;SSEの&lt;a href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF"&gt;レジスタ&lt;/a&gt;などが表示されていない場合は、&lt;a href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF"&gt;レジスタ&lt;/a&gt;ウィンドウを&lt;br&gt;
右クリックして、表示したいアイテムをクリックする。&lt;/p&gt;
&lt;h3&gt;参考URL&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://msdn.microsoft.com/ja-jp/library/aa290860%28VS.71%29.aspx"&gt;http://msdn.microsoft.com/ja-jp/library/aa290860%28VS.71%29.aspx&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 13 Sep 2009 12:44:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-09-13:/200909131252813492.html</guid></item><item><title>CPUID命令を使用して、SSEに対応しているか調べるコード</title><link>/200909121252748821.html</link><description>&lt;p&gt;VC++のインラインアセンブラからCPUID命令を使用してSSEに対応しているか調べるコードを書きました。&lt;/p&gt;
&lt;h2&gt;CPUID命令&lt;/h2&gt;
&lt;p&gt;EAXレジスタに値を入れてCPUID命令を呼び出すと、&lt;br&gt;
各レジスタにCPUの情報が格納されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EAX=0 ベンダIDの取得&lt;/li&gt;
&lt;li&gt;EAX=1 プロセッサ情報とプロセッサの機能&lt;/li&gt;
&lt;li&gt;EAX=2
    キャッシュとTLB&lt;a href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%B9%A5%AF%A5%EA%A5%D7%A5%BF"&gt;ディスクリプタ&lt;/a&gt;情報&lt;/li&gt;
&lt;li&gt;EAX=3 プロッセッサ・シリアル・ナンバ&lt;/li&gt;
&lt;li&gt;EAX=80000000h
    サポートする最大&lt;a href="http://d.hatena.ne.jp/keyword/%B3%C8%C4%A5%B5%A1%C7%BD"&gt;拡張機能&lt;/a&gt;番号の取得&lt;/li&gt;
&lt;li&gt;EAX=80000001h 拡張プロセッサ情報とプロセッサの機能&lt;/li&gt;
&lt;li&gt;EAX=80000002h,80000003h,80000004h プロセッサブランド文字列&lt;/li&gt;
&lt;li&gt;EAX=80000006h 拡張L2キャッシュ情報&lt;/li&gt;
&lt;li&gt;EAX=80000008h
    仮想アドレスと&lt;a href="http://d.hatena.ne.jp/keyword/%CA%AA%CD%FD%A5%A2%A5%C9%A5%EC%A5%B9"&gt;物理アドレス&lt;/a&gt;のサイズ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回はSSEに対応しているか調べたいのでEAXには、1を入れてCPUID命令を呼び出します。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.sandpile.org/ia32/cpuid.htm"&gt;http://www.sandpile.org/ia32/cpuid …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 12 Sep 2009 18:47:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-09-12:/200909121252748821.html</guid></item><item><title>Makefileメモ</title><link>/200909021251868590.html</link><description>&lt;h2&gt;Makefailを分割&lt;/h2&gt;
&lt;p&gt;makeでデフォルトで実行されるのは&lt;a href="http://d.hatena.ne.jp/keyword/Makefile"&gt;Makefile&lt;/a&gt;&lt;br&gt;
ファイルを指定して実行するのには&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; make -f Makefile.hoge hoge
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とすればいい。&lt;/p&gt;
&lt;h2&gt;ディレクトリの移動&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Makefile"&gt;Makefile&lt;/a&gt;中で&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  hoge:
(cd hoge; make -f Makefile.hoge hoge)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;の様にすれば()のなかだけ&lt;a href="http://d.hatena.ne.jp/keyword/hoge"&gt;hoge&lt;/a&gt;に移動して()の外に出ると元のディレクトリに自動で戻る。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Wed, 02 Sep 2009 14:16:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-09-02:/200909021251868590.html</guid></item><item><title>ファイル検索関数サンプル</title><link>/200909011251772858.html</link><description>&lt;p&gt;ディレクトリを指定してファイルを検索するWinAPIサンプル&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;HANDLE&lt;/span&gt; &lt;span class="n"&gt;hFind&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;WIN32_FIND_DATA&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;fpath&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_MAX_PATH&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;wsprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hogehoge&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;*.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//txtファイルを検索&lt;/span&gt;
&lt;span class="n"&gt;hFind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FindFirstFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hFind&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;INVALID_HANDLE_VALUE&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="c1"&gt;//検索失敗&lt;/span&gt;
  &lt;span class="p"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//ここでfd.cFileNameに検索結果のファイル名が入る。&lt;/span&gt;
  &lt;span class="c1"&gt;//ファイル名だけなので注意する。&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FindNextFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hFind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FindClose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hFind&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Tue, 01 Sep 2009 11:40:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-09-01:/200909011251772858.html</guid></item><item><title>CBitmapButtonを継承してマウスオーバー時に画像を変化させるようにする。</title><link>/200908301251628999.html</link><description>&lt;p&gt;デフォルトのCBitmapButtonだとマウスオーバー時の画像を読み込んで&lt;br&gt;
表示させてくれないので、CBitmapButtonを継承して機能を付け足しました。&lt;/p&gt;
&lt;p&gt;Create()で作成して、LoadBitmapsで画像を読み込みます。&lt;br&gt;
その他のAutoLoadなどには対応していません。&lt;/p&gt;
&lt;h2&gt;ヘッダー&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#pragma once&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CHoverBitmapButton&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;CBitmapButton&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;CHoverBitmapButton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;m_isHover&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;CHoverBitmapButton&lt;/span&gt;&lt;span class="p"&gt;(){};&lt;/span&gt;
    &lt;span class="n"&gt;BOOL&lt;/span&gt; &lt;span class="nf"&gt;LoadBitmaps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;UINT&lt;/span&gt; &lt;span class="n"&gt;nIDBitmapResource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;UINT&lt;/span&gt; &lt;span class="n"&gt;nIDBitmapResourceHov&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;UINT&lt;/span&gt; &lt;span class="n"&gt;nIDBitmapResourceSel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;UINT&lt;/span&gt; &lt;span class="n"&gt;nIDBitmapResourceFocus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;UINT&lt;/span&gt; &lt;span class="n"&gt;nIDBitmapResourceDisabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DrawItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LPDRAWITEMSTRUCT&lt;/span&gt; &lt;span class="n"&gt;lpDis&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;protected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;afx_msg&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;OnMouseMove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UINT&lt;/span&gt; &lt;span class="n"&gt;nFlags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CPoint&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;LRESULT&lt;/span&gt; &lt;span class="nf"&gt;OnMouseHover&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WPARAM&lt;/span&gt; &lt;span class="n"&gt;wp …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 30 Aug 2009 19:43:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-08-30:/200908301251628999.html</guid></item><item><title>TreeViewコントロール 選択されたアイテムの文字列を取得するには</title><link>/200908281251430033.html</link><description>&lt;p&gt;まず、親ウィンドウでWM_NOTIFYを捕まえる。&lt;br&gt;
WM_NOTIFYでTreeViewのイベントが送られてくるのでこれを処理する。&lt;br&gt;
このときLPARAMにはNMTREEVIEW構造体のアドレスが入っている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;LPNMTREEVIEW&lt;/span&gt; &lt;span class="n"&gt;lpnmtview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LPNMTREEVIEW&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lpnmtview&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;hdr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idFrom&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;IDC_CONFIG_TREE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lpnmtview&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;hdr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;NM_CLICK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;//ツリーアイテムクリック時&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;TVN_SELCHANGED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;//ツリーアイテム選択変更時&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;このように&lt;br&gt;
lpnmtview-&amp;gt;hdr.idFromにツリービューのIDが、&lt;br&gt;
lpnmtview-&amp;gt;hdr.codeのイベントのIDが入っている。&lt;/p&gt;
&lt;p&gt;クリックイベント時にはまだ、アイテムは選択されていないので、&lt;br&gt;
NM_CLICKを捕まえて、選択アイテムを取得するというやり方では上手くいかない。&lt;/p&gt;
&lt;p&gt;なので、TVN_SELCHANGED時に、選択アイテムを取得するという方法で行います。&lt;br&gt;
このとき、送られてくる、NMTREEVIEW構造体に選択されているTVITEMが入ってるが、&lt;br&gt;
このTVITEMのラベル名は正しく格納されていないので自分で取得する必要がある。&lt;/p&gt;
&lt;p&gt;コード例は以下のようになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;LPNMTREEVIEW&lt;/span&gt; &lt;span class="n"&gt;lpnmtview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LPNMTREEVIEW&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Fri, 28 Aug 2009 12:27:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-08-28:/200908281251430033.html</guid><category>Windows</category></item><item><title>Ubuntu9.04 netbook remixのインストール</title><link>/200908271251337964.html</link><description>&lt;p&gt;Ubuntu9.04 &lt;a href="http://d.hatena.ne.jp/keyword/netbook"&gt;netbook&lt;/a&gt;
remixを&lt;a href="http://d.hatena.ne.jp/keyword/EeePC"&gt;EeePC&lt;/a&gt;
1002HAEにインストールした。&lt;br&gt;
インストール直後の&lt;a href="http://d.hatena.ne.jp/keyword/Windows"&gt;Windows&lt;/a&gt;ではCドライブ80GBとDドライブ60GBに&lt;a href="http://d.hatena.ne.jp/keyword/%A5%D1%A1%BC%A5%C6%A5%A3%A5%B7%A5%E7%A5%F3"&gt;パーティション&lt;/a&gt;が分かれており、(他に4GBほどのリカバリー用の&lt;a href="http://d.hatena.ne.jp/keyword/%A5%D1%A1%BC%A5%C6%A5%A3%A5%B7%A5%E7%A5%F3"&gt;パーティション&lt;/a&gt;がついている。)&lt;br&gt;
このDドライブにインストールすることにした。&lt;/p&gt;
&lt;p&gt;1GBのSDカードにインストールイメージを書き込み、&lt;br&gt;
誘導にしたがってインストールを行った。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://f.hatena.ne.jp/hiroki0/20090826210238"&gt;&lt;img alt="f:id:hiroki0:20090826210238j:image" class="hatena-fotolife" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20090826/20090826210238.jpg" title="f:id:hiroki0:20090826210238j:image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;起動も結構早くていい感じ。&lt;/p&gt;
&lt;h4&gt;参考URL&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://blog.browncat.org/2009/05/ubuntu_904_netbook_remix.html"&gt;http://blog.browncat.org/2009/05/ubuntu_904_netbook_remix.html&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Thu, 27 Aug 2009 10:52:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-08-27:/200908271251337964.html</guid></item><item><title>ホスト内のWebページをたどりリンクされているファイルを抜き出すスクリプト</title><link>/200908061249511852.html</link><description>&lt;p&gt;Hprocotを利用して、HTMLページでaタグのhref属性でリンクされているファイルを抜き出すスクリプトを書いてみた。&lt;br&gt;
リンクされているのが同じホスト内のhtmlならそのhtmlもパースします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!ruby -Ks&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hpricot&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;open-uri&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;uri&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GetWebFile&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="vi"&gt;@file_ary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;root_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
      &lt;span class="k"&gt;begin&lt;/span&gt;
        &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hpricot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;TimeoutError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
          &lt;span class="nb"&gt;warn&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;atag&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;atag&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;nil …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Thu, 06 Aug 2009 07:37:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-08-06:/200908061249511852.html</guid></item><item><title>バックアップファイルが作成されるディレクトリの指定</title><link>/200908051249477353.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/xyzzy"&gt;xyzzy&lt;/a&gt;は編集ファイルと同じディレクトリに&lt;a href="http://d.hatena.ne.jp/keyword/hoge"&gt;hoge&lt;/a&gt;.1~みたいなバックアップファイルを作ります。&lt;br&gt;
この設定のままだと作業ディレクトリにバックアップファイルがたくさんできて困るので、以下の方法で別のディレクトリにバックアップファイルを作ります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(require &amp;quot;backup&amp;quot;)
(setq *backup-directory* &amp;quot;D:/backup/&amp;quot;)
(setq *hierarchic-backup-directory* t)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Wed, 05 Aug 2009 22:02:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-08-05:/200908051249477353.html</guid></item><item><title>PSDデータのフォーマット</title><link>/200908021249208355.html</link><description>&lt;h3&gt;PSDファイルの構成&lt;/h3&gt;
&lt;p&gt;PSDファイルは、先頭から以下の順で構成されている。&lt;br&gt;
値はビッグエンディアンで格納されているのでリトルエンディアンへの変換が必要&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Header]&lt;/span&gt;
&lt;span class="k"&gt;[Color Mode Data Block]&lt;/span&gt;
&lt;span class="k"&gt;[Image Resources Block]&lt;/span&gt;
&lt;span class="k"&gt;[Layer and Mask Information Block]&lt;/span&gt;
&lt;span class="k"&gt;[Image Data]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Header&lt;/h3&gt;
&lt;p&gt;[4byte] Signature  "8BPS"が入ってるらしい
[2byte] Version バージョン
[6byte] Reserved 0で無いといけない
[2byte] channels カラーチャンネル数 (例えば、RGBAだと4)
[4byte] rows 画像の高さ
[4byte] columns 画像の幅
[2byte] Depth 1pixelのデータ深度
[2byte] color_mode カラーモード&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;カラーモード&lt;ul&gt;
&lt;li&gt;0 Bitmap …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 02 Aug 2009 19:19:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-08-02:/200908021249208355.html</guid></item><item><title>ssh経由でgit</title><link>/200906281246189191.html</link><description>&lt;p&gt;Git Extensionsから&lt;a href="http://d.hatena.ne.jp/keyword/SSH"&gt;SSH&lt;/a&gt;経由でgitを使うために&lt;a href="http://d.hatena.ne.jp/keyword/WinSCP"&gt;WinSCP&lt;/a&gt;についてくるPuttyGen等で作成する。
Git Extensionsで使用する&lt;a href="http://d.hatena.ne.jp/keyword/ssh"&gt;ssh&lt;/a&gt;のppkキーはssh1のものでないとエラーがでる。
 Urlはこんな感じで指定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ssh](http://d.hatena.ne.jp/keyword/ssh)://@:/var/repos/hogehoge.git
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 28 Jun 2009 20:39:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-06-28:/200906281246189191.html</guid></item><item><title>gitサーバからソースを取ってきて、編集してサーバに変更を反映する</title><link>/200904201240227874.html</link><description>&lt;h2&gt;&lt;a href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA"&gt;リポジトリ&lt;/a&gt;を新規作成&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;フォルダを新規作成&lt;/li&gt;
&lt;li&gt;[フォルダを右クリック]→[Git Extensions]→[Browse]でGit
    Extensionsを起動&lt;/li&gt;
&lt;li&gt;[Initialize new repository]で初期化&lt;/li&gt;
&lt;li&gt;pullダイアログを開いてRemote
    repositoryにgitサーバの&lt;a href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA"&gt;リポジトリ&lt;/a&gt;を指定してpull&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ローカル&lt;a href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA"&gt;リポジトリ&lt;/a&gt;で作業&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソースを変更したらCommitダイアログを開く&lt;/li&gt;
&lt;li&gt;[Add many files]→[add
    files]→[commit]で変更したものを全てローカル&lt;a href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA"&gt;リポジトリ&lt;/a&gt;にcommitできる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;サーバにpush&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pushダイアログを開いてRemote
    repositoryにgitサーバの&lt;a href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA"&gt;リポジトリ&lt;/a&gt;を指定してpush&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 20 Apr 2009 20:44:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-04-20:/200904201240227874.html</guid></item><item><title>git addしたくないファイルを指定する。</title><link>/200904141239716589.html</link><description>&lt;h2&gt;Git Extensionsのメニューから.gitgnoreの編集ダイアログを出す。&lt;/h2&gt;
&lt;p&gt;[Settings] -&amp;gt; [Edit .gitgnore]&lt;/p&gt;
&lt;h2&gt;.gitgnoreの編集&lt;/h2&gt;
&lt;p&gt;.gitgnoreの設定方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# &amp;#39;#&amp;#39; で始まる行は無視されます
# foo.txt という名前の全てのファイルを無視する
foo.txt
# (生成された) html ファイルは無視する
*.html
# foo.html は例外とし、手でメンテナンスします
!foo.html
# object と archive ファイルは無視する
*.[oa]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[Add default]ボタンを押すと、大抵の邪魔なファイルを取り除くように設定される。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www8.atwiki.jp/git_jp/pub/Documentation.ja/user-manual.html#ignoring-files"&gt;http://www8.atwiki.jp/git_jp/pub/Documentation.ja/user-manual.html#ignoring-files&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Tue, 14 Apr 2009 22:43:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-04-14:/200904141239716589.html</guid></item><item><title>Debian上にgitサーバーを立てる</title><link>/200904141239716590.html</link><description>&lt;h2&gt;gitとgitデーモン起動用のパッケージをインストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#apt-get install git-core git-daemon-run
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;a href="http://d.hatena.ne.jp/keyword/daemon"&gt;daemon&lt;/a&gt;の起動&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8"&gt;スクリプト&lt;/a&gt;編集&lt;/h2&gt;
&lt;p&gt;そのままの設定では面倒なこと(&lt;a href="http://d.hatena.ne.jp/fuzzy2/20090228/p2"&gt;http://d.hatena.ne.jp/fuzzy2/20090228/p2&lt;/a&gt;)になるので、git-daemonの起動スクリプトを編集する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#vi /etc/sv/git-daemon/run
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#exec git-daemon --verbose --base-path=/var/cache /var/cache/git
exec git-daemon --verbose --base-path=/var/repos --export-all --enable=receive-pack 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;a href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA"&gt;リポジトリ&lt;/a&gt;の作成&lt;/h2&gt;
&lt;h2&gt;ローカル&lt;a href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA"&gt;リポジトリ&lt;/a&gt;の作成&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Tue, 14 Apr 2009 22:43:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-04-14:/200904141239716590.html</guid></item><item><title>LightwaveファイルからXファイルへコンバートするプラグインはいろいろ問題が</title><link>/200902111234333888.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Lightwave"&gt;Lightwave&lt;/a&gt;の公式&lt;a href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3"&gt;プラグイン&lt;/a&gt;で、&lt;a href="http://d.hatena.ne.jp/keyword/X%A5%D5%A5%A1%A5%A4%A5%EB"&gt;Xファイル&lt;/a&gt;形式でモデルを出力してくれる&lt;a href="http://d.hatena.ne.jp/keyword/DirectX"&gt;DirectX&lt;/a&gt;
Exporterというのがあるのだが、、、&lt;br&gt;
ダメダメすぎて、ストレスがたまる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出力したファイルにメッシュ情報がのってない。空のフレームだけ&lt;/li&gt;
&lt;li&gt;(おそらくだけど)IKをつかってないモーションモデルをBake
    IKで出力させると&lt;a href="http://d.hatena.ne.jp/keyword/Lightwave"&gt;Lightwave&lt;/a&gt;まで巻き込んで落ちる&lt;/li&gt;
&lt;li&gt;ようやく、メッシュ情報がのったファイルが出力されたと思ったらファイルが壊れててViewerで再生できない････&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直に&lt;a href="http://d.hatena.ne.jp/keyword/Lightwave"&gt;Lightwave&lt;/a&gt;のファイルをさわったほうがはやい、というかさわらざるをえない&lt;br&gt;
・&lt;a href="http://d.hatena.ne.jp/keyword/Lightwave"&gt;Lightwave&lt;/a&gt;の&lt;a href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%D9%A5%ED%A5%C3%A5%D1"&gt;デベロッパ&lt;/a&gt;ー情報&lt;br&gt;
&lt;a href="http://www.dstorm.co.jp/products/lw8/developer/game/index.htm"&gt;http://www.dstorm.co.jp/products/lw8/developer/game/index.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DirectX10で&lt;a href="http://d.hatena.ne.jp/keyword/X%A5%D5%A5%A1%A5%A4%A5%EB"&gt;Xファイル&lt;/a&gt;のヘルプ関数が無くなり、これから無くなっていくであろうファイルフォーマットなので&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/X%A5%D5%A5%A1%A5%A4%A5%EB"&gt;Xファイル&lt;/a&gt;にこだわることも無いのかもしれない。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Wed, 11 Feb 2009 15:31:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-02-11:/200902111234333888.html</guid></item><item><title>Xファイルのフォーマット(5)</title><link>/200902071233968785.html</link><description>&lt;p&gt;今回はスキンメッシュに使うテンプレートの説明。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;SkinMeshHeader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;一つの頂点に対して、影響を与えるボーンの最大数&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;一つの面に対して、影響を与えるボーンの最大数&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;ボーンの数&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;SkinWeight&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;ボーン&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;フレーム&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;の名前&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;重みの数&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;重みを与える頂点&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//繰り返し&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;の値の頂点に対する重み&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//繰り返し&lt;/span&gt;
        &lt;span class="err"&gt;メッシュの頂点をボーンの空間にトランスフォームする&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;x4行列&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;SkinMeshHeaderの中にあるボーンの数だけSkinWeightは定義されているはずです。&lt;br&gt;
AnimationKeyでボーンが変形されたとき、重みにあわせて変形量を変える事によって&lt;br&gt;
スキンメッシュを実装します。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 07 Feb 2009 10:06:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-02-07:/200902071233968785.html</guid></item><item><title>Xファイルのフォーマット(4)</title><link>/200902051233792037.html</link><description>&lt;p&gt;&lt;a href="200703241174740494.html"&gt;Xファイルのフォーマット(1)&lt;/a&gt;
&lt;a href="200703251174775823.html"&gt;Xファイルのフォーマット(2)&lt;/a&gt;
&lt;a href="200902041233704553.html"&gt;Xファイルのフォーマット(3)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回は、アニメーションのまとめ。&lt;br&gt;
アニメーションは以下のように表されます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;AnimationSet AnimationSet_name {
    Animation Animation0 {
        { frame1 } //フレーム名frame1のアニメーション
        AnimationKey {
            キータイプ;
            キー数;
            キー値;データ個数;データ;, //繰り返し
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;AnimationSetは、一つのアニメーションを表し、1\~N個のAnimationを持ちます。&lt;br&gt;
Animationは、一つのフレームについての、キーアニメーションデータを格納するAnimationKeyを持ちます。&lt;br&gt;
AnimationKey内のキータイプが0の場合は回転、1の場合はスケーリング、2の場合は平行移動、4の場合は変換行列を表します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回転の場合は、w,x,y,zの順で&lt;a href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%A9%A1%BC%A5%BF%A5%CB%A5%AA%A5%F3"&gt;クォータニオン&lt;/a&gt;データが格納されています&lt;/li&gt;
&lt;li&gt;スケーリングの場合は、x,y,zの順で拡大縮小データが格納されています&lt;/li&gt;
&lt;li&gt;平行移動の場合は、x,y,zの順で平行移動値データが格納されています&lt;/li&gt;
&lt;li&gt;変換行列の場合は、4x4の回転 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Thu, 05 Feb 2009 09:00:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-02-05:/200902051233792037.html</guid></item><item><title>Xファイルのフォーマット(3)</title><link>/200902041233704553.html</link><description>&lt;p&gt;&lt;a href="200703241174740494.html"&gt;Xファイルのフォーマット(1)&lt;/a&gt;
&lt;a href="200703251174775823.html"&gt;Xファイルのフォーマット(2)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;学校の課題で&lt;a href="http://d.hatena.ne.jp/keyword/X%A5%D5%A5%A1%A5%A4%A5%EB"&gt;Xファイル&lt;/a&gt;のアニメーションを&lt;a href="http://d.hatena.ne.jp/keyword/OpenGL"&gt;OpenGL&lt;/a&gt;で再生することになりそうなので、&lt;a href="http://d.hatena.ne.jp/keyword/X%A5%D5%A5%A1%A5%A4%A5%EB"&gt;Xファイル&lt;/a&gt;のフォーマットの続きをまとめてみる。&lt;/p&gt;
&lt;p&gt;今回はフレームについて、&lt;br&gt;
フレームは、メッシュの階層構造をあらわしたり、スキンメッシュにおけるボーンをあらわしたりします。&lt;br&gt;
フレームの形式はは、このようになっている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Frame&lt;/span&gt; &lt;span class="n"&gt;Aframe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// 名前を持つ場合もある、この場合はAframeがこのフレームの名前である。&lt;/span&gt;
    &lt;span class="n"&gt;FrameTransformMatrix&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;x4行列&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;Meshes&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;More&lt;/span&gt; &lt;span class="n"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[フレームは、4x4行列1つを必ず持ち、メッシュを0\~N個、子フレームを0\~N個持ちます。&lt;br&gt;
行列は、自分の空間から親の空間へ、座標変換を行うときに使用します。&lt;/p&gt;
&lt;p&gt;最小のフレームを持つXファイルの形式は以下のようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Frame {
    FrameTransformMatrix { //単位行列なので変換は行わない
        1.0, 0.0, 0.0, 0.0 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Wed, 04 Feb 2009 08:42:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-02-04:/200902041233704553.html</guid></item><item><title>玄箱に組み込んだSeagateのHDDのチェック</title><link>/200901191232360978.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Seagate"&gt;Seagate&lt;/a&gt;の1.5TのHDD(ST31500341AS)に、ファーム関係で問題があるらしい。&lt;br&gt;
&lt;a href="http://pc.watch.impress.co.jp/docs/2009/0119/seagate.htm"&gt;http://pc.watch.impress.co.jp/docs/2009/0119/seagate.htm&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; # apt-get install hdparam
 # hdparm -i /dev/hda
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で、HDDの型番とシリアル番号をチェック。&lt;/p&gt;
&lt;p&gt;CCとかLCがシリアル番号に入ってたらセーフ&lt;br&gt;
&lt;a href="http://seagate.custkb.com/seagate/crm/selfservice/search.jsp?DocId=207957"&gt;http://seagate.custkb.com/seagate/crm/selfservice/search.jsp?DocId=207957&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 19 Jan 2009 19:29:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-01-19:/200901191232360978.html</guid></item><item><title>ファイルを開くダイアログを開いたときは、カレントディレクトリが変わってる</title><link>/200901151232037934.html</link><description>&lt;p&gt;題名の通りです。&lt;/p&gt;
&lt;p&gt;GetOpenFileNameなどでダイアログを開くとカレントディレクトリが変わってしまうようです。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/%C1%EA%C2%D0%A5%D1%A5%B9"&gt;相対パス&lt;/a&gt;で指定したファイルが開けない場合があったので調べてみると、上の通りでした。&lt;br&gt;
何時間無駄にしたことやら･･･&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Thu, 15 Jan 2009 01:45:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-01-15:/200901151232037934.html</guid></item><item><title>自動的にメニュー項目が非活性(グレーアウト)されるのを防ぎたい時は</title><link>/200901071231340723.html</link><description>&lt;p&gt;自動的にメニュー項目が非活性(グレーアウト)されるのを防ぎたい時は&lt;br&gt;
CWnd::m_bAutoMenuEnable = FALSE;&lt;br&gt;
を行っておく。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/MSDN"&gt;MSDN&lt;/a&gt;:&lt;br&gt;
&lt;a href="http://msdn.microsoft.com/ja-jp/library/dz33x6wb(VS.71).aspx"&gt;http://msdn.microsoft.com/ja-jp/library/dz33x6wb(VS.71).aspx&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Wed, 07 Jan 2009 00:05:00 +0900</pubDate><guid isPermaLink="false">tag:None,2009-01-07:/200901071231340723.html</guid></item><item><title>CViewのアクティブイベント</title><link>/200812231230038929.html</link><description>&lt;p&gt;CViewのアクティブイベントは、CView::OnActivateView()で拾える。&lt;/p&gt;
&lt;p&gt;OnActivate()とかOnMDIActivate()とかOnNcActivate()だとだめだった。&lt;br&gt;
調べてみたが結局OnActivateView()が正解みたいだ。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Tue, 23 Dec 2008 22:28:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-12-23:/200812231230038929.html</guid></item><item><title>CMultiDocTemplateの子ウィンドウのメニュー変更</title><link>/200812221230038929.html</link><description>&lt;p&gt;CDocument::GetDefaultMenu()をオーバーライドし、&lt;br&gt;
自分で作成したHMENUを返せばよい。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 22 Dec 2008 22:28:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-12-22:/200812221230038929.html</guid></item><item><title>DLLにおけるSTLの利用</title><link>/200811281227899513.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/hiroki0/20081109/1226244221"&gt;http://d.hatena.ne.jp/hiroki0/20081109/1226244221&lt;/a&gt;&lt;br&gt;
↑のヒープのエラーがでる問題だが、DLLとEXE間で&lt;a href="http://d.hatena.ne.jp/keyword/STL"&gt;STL&lt;/a&gt;の&lt;a href="http://d.hatena.ne.jp/keyword/vector"&gt;vector&lt;/a&gt;のやり取りをしてたのが原因らしい。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/STL"&gt;STL&lt;/a&gt;は、inline展開されるので、DLL側とEXE側と２つ&lt;a href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%CA%A5%EA%A5%B3%A1%BC%A5%C9"&gt;バイナリコード&lt;/a&gt;が生成され、&lt;br&gt;
これが実行時に食い違うと判定されて、ヒープのエラーが出ていたようだ。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/STL"&gt;STL&lt;/a&gt; DLL
で&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B0%A5%B0%A4%EB"&gt;ググる&lt;/a&gt;とたくさんページが出てきた。&lt;/p&gt;
&lt;p&gt;参考リンク&lt;br&gt;
&lt;a href="http://support.microsoft.com/kb/172396/ja"&gt;http://support.microsoft.com/kb/172396/ja&lt;/a&gt;&lt;br&gt;
&lt;a href="http://lamoo.s53.xrea.com/develop/tips/dlltips.html"&gt;http://lamoo.s53.xrea.com/develop/tips/dlltips.html&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Fri, 28 Nov 2008 04:11:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-11-28:/200811281227899513.html</guid></item><item><title>インポートライブラリが出力されない</title><link>/200811221227385060.html</link><description>&lt;p&gt;__declspec(dllexport)
をひとつもつけないでdllを&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB"&gt;コンパイル&lt;/a&gt;すると&lt;br&gt;
インポートライブラリ(*.lib)を吐かない。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 22 Nov 2008 05:17:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-11-22:/200811221227385060.html</guid></item><item><title>ファイル読み込みモジュール作成</title><link>/200811071226064350.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/OpenCV"&gt;OpenCV&lt;/a&gt;のcvLoadImage()だとアルファ値を読んでくれないので、&lt;br&gt;
libpngとzlibをつかって&lt;a href="http://d.hatena.ne.jp/keyword/png"&gt;png&lt;/a&gt;読み込みモジュールを作った&lt;/p&gt;
&lt;p&gt;&lt;a href="http://f.hatena.ne.jp/hiroki0/20081107221654"&gt;&lt;img alt="f:id:hiroki0:20081107221654p:image" class="hatena-fotolife" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20081107/20081107221654.png" title="f:id:hiroki0:20081107221654p:image"&gt;&lt;/a&gt;
↑cvLoadImage()で読み込み、わかりづらいが、アルファ値が読まれていない。&lt;br&gt;
&lt;a href="http://f.hatena.ne.jp/hiroki0/20081107221655"&gt;&lt;img alt="f:id:hiroki0:20081107221655p:image" class="hatena-fotolife" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20081107/20081107221655.png" title="f:id:hiroki0:20081107221655p:image"&gt;&lt;/a&gt;
↑libpngで読み込みアルファ値が読まれている。&lt;/p&gt;
&lt;p&gt;ついでにThe Independent
&lt;a href="http://d.hatena.ne.jp/keyword/JPEG"&gt;JPEG&lt;/a&gt; Group\'s
&lt;a href="http://d.hatena.ne.jp/keyword/JPEG"&gt;JPEG&lt;/a&gt;
softwareの&lt;a href="http://d.hatena.ne.jp/keyword/jpeg"&gt;jpeg&lt;/a&gt;ライブラリを使って、&lt;br&gt;
ファイル読み込みモジュールを作成。&lt;/p&gt;
&lt;p&gt;cvLoadImage()だと読めない、&lt;a href="http://d.hatena.ne.jp/keyword/jpeg"&gt;jpeg&lt;/a&gt;ファイルがあるのだが、このモジュールを使えば読み込めるようになった。&lt;/p&gt;
&lt;p&gt;[The Independent &lt;a href="http://d.hatena.ne.jp/keyword/JPEG"&gt;JPEG&lt;/a&gt;
Group\'s &lt;a href="http://d.hatena.ne.jp/keyword/JPEG"&gt;JPEG&lt;/a&gt;
software]{style="font-weight:bold;"}&lt;br&gt;
&lt;a href="http://www.ijg.org/"&gt;http://www.ijg.org/&lt;/a&gt;&lt;br&gt;
[libpng]{style="font-weight:bold;"}&lt;br&gt;
&lt;a href="http://www.libpng.org/pub/png/libpng.html"&gt;http://www.libpng.org/pub/png …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Fri, 07 Nov 2008 22:25:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-11-07:/200811071226064350.html</guid></item><item><title>C++クラスのDLL化</title><link>/200809101221052880.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/C%2B%2B"&gt;C++&lt;/a&gt;のクラスのDLL化の参考リンク&lt;br&gt;
&lt;a href="http://msdn.microsoft.com/ja-jp/library/a90k134d(VS.80).aspx"&gt;http://msdn.microsoft.com/ja-jp/library/a90k134d(VS.80).aspx&lt;/a&gt;&lt;br&gt;
&lt;a href="http://forums.microsoft.com/MSDN-JA/ShowPost.aspx?PostID=1582533&amp;amp;SiteID=7"&gt;http://forums.microsoft.com/MSDN-JA/ShowPost.aspx?PostID=1582533&amp;amp;SiteID=7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www2s.biglobe.ne.jp/~ragnarok/program/win32/class_of_cpp_in_dll.htm"&gt;http://www2s.biglobe.ne.jp/~ragnarok/program/win32/class_of_cpp_in_dll.htm&lt;/a&gt;&lt;br&gt;
↑は、DLLとEXE側で、クラスのサイズが違ってたりすることがあるので、&lt;br&gt;
DLL側でメモリの確保、開放をしたほうがいいよということらしい。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Wed, 10 Sep 2008 22:21:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-09-10:/200809101221052880.html</guid></item><item><title>プリコンパイル済みヘッダー</title><link>/200809081220891447.html</link><description>&lt;p&gt;コンパイル時間の短縮のためにプリコンパイル済みヘッダーを導入したが、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c80.pdbは、このプリコンパイル済みヘッダーが作成されたときに使用されたpdbファイルではありません。プリコンパイル済みヘッダーを再作成してください。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;の様なエラーが出た。&lt;/p&gt;
&lt;p&gt;これは、後から、StdAfx.cppを追加すると、デフォルトで「プリコンパイル済ヘッダの使用」になっているので起こるようだ。&lt;br&gt;
ソリューションエクスプローラからStdAfx.cppを右クリック→プロパティーで「プリコンパイル済ヘッダの作成」に変更する。&lt;/p&gt;
&lt;p&gt;StdAfx.cppのみ、「プリコンパイル済ヘッダの作成」にすることで上手くいく様だ。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 08 Sep 2008 01:30:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-09-08:/200809081220891447.html</guid></item><item><title>ソースからショートカットメニューを表示する場合の注意</title><link>/200808131218617651.html</link><description>&lt;p&gt;TrackPopupMenu()でショートカットメニューを表示する場合、CreateMenu()ではなく、&lt;br&gt;
CreatePopupMenu()で作成したメニューを使用しないと上手く表示されない。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Wed, 13 Aug 2008 17:54:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-08-13:/200808131218617651.html</guid></item><item><title>photoshopのブラシデータのフォーマット(2)</title><link>/200807111215788657.html</link><description>&lt;p&gt;昨日の続き&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;先頭から
[2byte] abrファイルのバージョン(1,2,6があるようだ)
/* ver1 or 2の場合 */
[2byte] ブラシの個数
以下最後までブラシデータの繰り返し
｜ [2byte] ブラシタイプ 1のときcomputedブラシ 2のときsampledブラシ
｜ [4byte] ブラシのサイズ
/*ブラシタイプ 1 computed brush*/
/*ブラシタイプ 2 sampled brush*/
｜ [6byte] 不要なデータ
｜ [4byte] 名前のサイズ
｜ 
｜ ・
｜ ・ 名前データ 名前のサイズ分だけ
｜ ・
｜ 
｜ [9byte] 不要なデータ
｜ [4byte] ブラシの領域の上辺の値
｜ [4byte] ブラシの領域の左辺の値
｜ [4byte] ブラシの領域の下辺の値
｜ [4byte] ブラシの領域の右辺の値
｜ [4byte] ブラシのデータ深度
｜ [1byte] 圧縮有りか無しか
以下ver 6と同様
/* 圧縮無しの場合 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Fri, 11 Jul 2008 00:04:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-07-11:/200807111215788657.html</guid></item><item><title>photoshopのブラシデータのフォーマット</title><link>/200807101215708667.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/photoshop"&gt;photoshop&lt;/a&gt;のブラシデータのフォーマットを調べてみることにした。&lt;br&gt;
なかなか説明がのっているサイトが無いので拾った&lt;a href="http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC"&gt;C言語&lt;/a&gt;ソースから、調べることにした。&lt;br&gt;
値の格納法はビッグエンディアンなのでリトルエンディアンへ変換しないといけない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ファイル先頭から次のようになっている。
[2byte] abrファイルのバージョン(1,2,6があるようだ)
/* ver6の場合 */
[2byte] subversion(6.xのxの部分、6.1と6.2があるようだ)
[1byte][1byte][1byte][1byte] &amp;quot;8BIM&amp;quot; になっていなければならない
[1byte][1byte][1byte][1byte] 8BIMtagの名前 ヌル文字は入ってないので注意
[4byte] セクションサイズ この後からファイルの末尾までのファイルサイズ
以下最後までブラシデータの繰り返し
｜ [4byte] ブラシサイズ ブラシデータのサイズ
｜ [37byte] 不要なデータ
｜ [10 or 264 byte] 不要なデータ 6.1の場合は10byte 6 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Thu, 10 Jul 2008 01:51:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-07-10:/200807101215708667.html</guid></item><item><title>行列の計算</title><link>/200807061215360635.html</link><description>&lt;p&gt;画像の拡大縮小で、↓の様な行列を使って変形させ、&lt;br&gt;
マウスの座標をこの&lt;a href="http://d.hatena.ne.jp/keyword/%B5%D5%B9%D4%CE%F3"&gt;逆行列&lt;/a&gt;をかけることによって画像上の座標に変換しようとしたが、&lt;br&gt;
どうも上手くいかない。&lt;/p&gt;
&lt;p&gt;cvMul()で行列の掛け算をしてるとこで&lt;a href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B5%A1%BC%A5%B7%A5%E7%A5%F3"&gt;アサーション&lt;/a&gt;が起こる。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://f.hatena.ne.jp/hiroki0/20080707005724"&gt;&lt;img alt="f:id:hiroki0:20080707005724j:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20080707/20080707005724.jpg" title="f:id:hiroki0:20080707005724j:image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/DOSEI/20060508/p1"&gt;http://d.hatena.ne.jp/DOSEI/20060508/p1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;↑によるとcvMul()は要素同士の積なので、エラーが出たようだ。&lt;br&gt;
cvMatMul()を使用すると、上手くいけた。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 06 Jul 2008 01:10:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-07-06:/200807061215360635.html</guid></item><item><title>ダイアログのオーナーウィンドウ</title><link>/200806301214832557.html</link><description>&lt;p&gt;ダイアログのオーナーウィンドウのハンドルは、&lt;br&gt;
GetWindow()でGW_OWNERを指定することで得られるが、&lt;br&gt;
DialogBox()の第3引数で指定したものが得られるとは限らない。&lt;/p&gt;
&lt;p&gt;DialogBox()の第3引数で指定したウィンドウが子ウィンドウの場合、&lt;br&gt;
子ウィンドウはオーナーウィンドウになれないので、子ウィンドウの親を調べて子ウィンドウでなければ、そのウィンドウがオーナーウィンドウになる。&lt;br&gt;
子ウィンドウの親も子ウィンドウだった場合さらにその親を調べる。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 30 Jun 2008 22:29:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-06-30:/200806301214832557.html</guid></item><item><title>WinAPIでのWindowのクラス化</title><link>/200806021212424580.html</link><description>&lt;p&gt;プロシージャーは、staticな&lt;a href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%F3%A5%D0%B4%D8%BF%F4"&gt;メンバ関数&lt;/a&gt;を使用するとして&lt;br&gt;
プロシージャーから、SetProp(), GetProp(), RemoveProp()&lt;br&gt;
をしようして、ウィンドウハンドルから、自身のオブジェクトの&lt;a href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%A4%A5%F3%A5%BF%A1%BC"&gt;ポインター&lt;/a&gt;を
得れば何とかいけそう。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 02 Jun 2008 01:36:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-06-02:/200806021212424580.html</guid></item><item><title>OpenCVで処理した画像をDirectXで表示する。</title><link>/200805221211471166.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/OpenCV"&gt;OpenCV&lt;/a&gt;ではIplImage型に画像データが格納され、&lt;br&gt;
IplImageのimageDataから画像データにアクセスできる。&lt;br&gt;
データの格納順はBGRAとなっている。&lt;br&gt;
これを&lt;a href="http://d.hatena.ne.jp/keyword/DirectX"&gt;DirectX&lt;/a&gt;のテクスチャに変換できないかと思って実行した。&lt;/p&gt;
&lt;p&gt;手順はこんな感じ&lt;br&gt;
・IDirect3DTexture9::CreateTextureでテクスチャを作成&lt;br&gt;
・IDirect3DTexture9::LockRectを行ってデータを転送&lt;/p&gt;
&lt;p&gt;カメラに写っている内容を&lt;a href="http://d.hatena.ne.jp/keyword/DirectX"&gt;DirectX&lt;/a&gt;で表示&lt;br&gt;
&lt;a href="http://f.hatena.ne.jp/hiroki0/20080523003112"&gt;&lt;img alt="f:id:hiroki0:20080523003112p:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20080523/20080523003112.png" title="f:id:hiroki0:20080523003112p:image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コードはこんな感じでいけると思う。（&lt;a href="http://d.hatena.ne.jp/keyword/OpenCV"&gt;OpenCV&lt;/a&gt;側のデータが符号なし8ビット整数のときだけだが･･･）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;HRESULT&lt;/span&gt; &lt;span class="nf"&gt;CreateTextureIPLImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LPDIRECT3DDEVICE9&lt;/span&gt; &lt;span class="n"&gt;pDevice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IplImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;iplImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UINT&lt;/span&gt; &lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UINT&lt;/span&gt; &lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UINT&lt;/span&gt; &lt;span class="n"&gt;Levels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LPDIRECT3DTEXTURE9&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ppTexture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;HRESULT&lt;/span&gt; &lt;span class="n"&gt;hr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;//テクスチャ作成&lt;/span&gt;
  &lt;span class="n"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pDevice&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;CreateTexture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Levels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;D3DFMT_A8R8G8B8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;D3DPOOL_MANAGED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ppTexture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FAILED&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hr&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="k"&gt;return …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Thu, 22 May 2008 00:46:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-05-22:/200805221211471166.html</guid></item><item><title>OpenCVはじめました。</title><link>/200805211211319214.html</link><description>&lt;p&gt;安いUSBカメラかったので&lt;a href="http://d.hatena.ne.jp/keyword/OpenCV"&gt;OpenCV&lt;/a&gt;に手を出してみました。&lt;/p&gt;
&lt;p&gt;背景差分法のプログラムです。&lt;br&gt;
&lt;a href="http://f.hatena.ne.jp/hiroki0/20080521063155"&gt;&lt;img alt="f:id:hiroki0:20080521063155p:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20080521/20080521063155.png" title="f:id:hiroki0:20080521063155p:image"&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Wed, 21 May 2008 06:33:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-05-21:/200805211211319214.html</guid></item><item><title>■</title><link>/200805211211387379.html</link><description>&lt;p&gt;肌色部分抽出&lt;br&gt;
・&lt;a href="http://d.hatena.ne.jp/keyword/RGB"&gt;RGB&lt;/a&gt;から&lt;a href="http://d.hatena.ne.jp/keyword/HSV"&gt;HSV&lt;/a&gt;へ変換&lt;br&gt;
・H（色相）だけを取り出して、肌色っぽい部分を取り出す&lt;br&gt;
・取り出したものと背景差分のANDをとって表示&lt;br&gt;
&lt;a href="http://f.hatena.ne.jp/hiroki0/20080522011926"&gt;&lt;img alt="f:id:hiroki0:20080522011926p:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20080522/20080522011926.png" title="f:id:hiroki0:20080522011926p:image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;顔追跡&lt;br&gt;
・肌色領域の重心をもとめてそこを中心に円を描く&lt;br&gt;
&lt;a href="http://f.hatena.ne.jp/hiroki0/20080522011925"&gt;&lt;img alt="f:id:hiroki0:20080522011925p:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20080522/20080522011925.png" title="f:id:hiroki0:20080522011925p:image"&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Wed, 21 May 2008 01:29:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-05-21:/200805211211387379.html</guid><category>OpenCV</category></item><item><title>マルチバイト文字列処理 isleadbyte()</title><link>/20080421.html</link><description>&lt;h2&gt;マルチバイト文字列処理 isleadbyte()&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setlocale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LC_ALL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Japanese&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;isleadbyte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ってかかないと正しく動かないんだね･･･&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 21 Apr 2008 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-04-21:/20080421.html</guid></item><item><title>追記1</title><link>/200802071202826993.html</link><description>&lt;p&gt;標準でインストールされるPlatformSDKで&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB"&gt;コンパイル&lt;/a&gt;してみたがダメ。&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/DirectX"&gt;DirectX&lt;/a&gt;も問題なさそうだし・・・&lt;/p&gt;
&lt;p&gt;もうちょっと調べてみないとだめみたい。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Thu, 07 Feb 2008 23:36:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-02-07:/200802071202826993.html</guid></item><item><title>追記3</title><link>/200802071202938274.html</link><description>&lt;p&gt;XPの方のVisualStudioのインストール場所にあるVCフォルダを&lt;a href="http://d.hatena.ne.jp/keyword/Vista"&gt;Vista&lt;/a&gt;の方に持っていて置き換えて&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB"&gt;コンパイル&lt;/a&gt;してみた。&lt;br&gt;
結果は正常に動作した。(当たり前といえば当たり前というような気もするけど･･･&lt;br&gt;
とりあえず、問題がでるまでこれで行ってみようかと思う。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Thu, 07 Feb 2008 06:31:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-02-07:/200802071202938274.html</guid></item><item><title>追記2</title><link>/200802071202932163.html</link><description>&lt;p&gt;不具合とは直接関係ないが、&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/Vista"&gt;Vista&lt;/a&gt;でdshow.hやらが無いと言われて&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB"&gt;コンパイル&lt;/a&gt;できなかったDirectShowが&lt;br&gt;
XPの方で普通に&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB"&gt;コンパイル&lt;/a&gt;できていたのは古いDirectSDKへのリンクがはってあったからみたいだ。&lt;/p&gt;
&lt;p&gt;不具合のほうは一回XPの方のファイルを&lt;a href="http://d.hatena.ne.jp/keyword/Vista"&gt;Vista&lt;/a&gt;に突っ込んで&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB"&gt;コンパイル&lt;/a&gt;させてみようと思う。&lt;br&gt;
これで上手くいかなかったら、.NetFrameworkが原因だったりするのかな･･･&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Thu, 07 Feb 2008 04:49:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-02-07:/200802071202932163.html</guid></item><item><title>Vista開発環境での不具合</title><link>/200802071202404779.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Vista"&gt;Vista&lt;/a&gt;で&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB"&gt;コンパイル&lt;/a&gt;したものを、XPに持っていって実行してみると正常に動作しない・・・&lt;br&gt;
おそらくDirectXSDKかWindowsSDKが原因だと思われるのだが・・・・&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Thu, 07 Feb 2008 02:19:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-02-07:/200802071202404779.html</guid></item><item><title>新PCの開発環境構築</title><link>/200802031202053013.html</link><description>&lt;p&gt;新PCのOSには、&lt;a href="http://d.hatena.ne.jp/keyword/Vista"&gt;Vista&lt;/a&gt;を入れたので、&lt;a href="http://d.hatena.ne.jp/keyword/Vista"&gt;Vista&lt;/a&gt;上でVisual
Studio2005の開発環境を構築するときのメモ。&lt;/p&gt;
&lt;p&gt;まずは、Visual Studio2005のインストール。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Visual%20Studio"&gt;Visual Studio&lt;/a&gt;
2005  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Visual%20Studio"&gt;Visual Studio&lt;/a&gt;
2005 SP1  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Visual%20Studio"&gt;Visual Studio&lt;/a&gt;
2005 SP1 Update for &lt;a href="http://d.hatena.ne.jp/keyword/Windows%20Vista"&gt;Windows
Vista&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Vista"&gt;Vista&lt;/a&gt;にVisual
Studio2005を入れるにはこれらをインストールする必要があるようだ。&lt;br&gt;
参考ページ&lt;br&gt;
&lt;a href="http://support.microsoft.com/kb/936453/ja"&gt;http://support.microsoft.com/kb/936453/ja&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;次に、&lt;a href="http://d.hatena.ne.jp/keyword/DirectX"&gt;DirectX&lt;/a&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/SDK"&gt;SDK&lt;/a&gt;のインストールを行った。&lt;br&gt;
November2007は、dMusic.hがなくなったりと面倒だったので、August2007をインストール。&lt;br&gt;
ここは、特に問題なくいけた。&lt;/p&gt;
&lt;p&gt;ここで、XPで作成していたプロジェクトを&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB"&gt;コンパイル&lt;/a&gt;してみる。&lt;br&gt;
dShow …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 03 Feb 2008 00:36:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-02-03:/200802031202053013.html</guid></item><item><title>新PC</title><link>/200801271201444962.html</link><description>&lt;p&gt;新PCを組んでみた。&lt;br&gt;
構成は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU: E8400&lt;/li&gt;
&lt;li&gt;MEM: 4G&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/keyword/VGA"&gt;VGA&lt;/a&gt;: Geforce8600 GT&lt;/li&gt;
&lt;li&gt;OS: &lt;a href="http://d.hatena.ne.jp/keyword/Vista"&gt;Vista&lt;/a&gt; 32bit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Vista"&gt;Vista&lt;/a&gt;にしたが、XPの旧マシンよりもかなり動作が早くなった。&lt;/p&gt;
&lt;p&gt;旧PCベンチ&lt;br&gt;
&lt;a href="http://f.hatena.ne.jp/hiroki0/20080127233644"&gt;&lt;img alt="f:id:hiroki0:20080127233644p:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20080127/20080127233644.png" title="f:id:hiroki0:20080127233644p:image"&gt;&lt;/a&gt;
新PCベンチ&lt;br&gt;
&lt;a href="http://f.hatena.ne.jp/hiroki0/20080127233655"&gt;&lt;img alt="f:id:hiroki0:20080127233655p:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20080127/20080127233655.png" title="f:id:hiroki0:20080127233655p:image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;旧PCのスペック&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU: PentiumM1.8GHz(ぐらいだったかな・・&lt;/li&gt;
&lt;li&gt;MEM: 1G&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/keyword/VGA"&gt;VGA&lt;/a&gt;:
    &lt;a href="http://d.hatena.ne.jp/keyword/Radeon"&gt;Radeon&lt;/a&gt; x700&lt;/li&gt;
&lt;li&gt;OS: XP 32bit&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 27 Jan 2008 23:42:00 +0900</pubDate><guid isPermaLink="false">tag:None,2008-01-27:/200801271201444962.html</guid></item><item><title>文字コードのメモ</title><link>/200712031196697167.html</link><description>&lt;p&gt;ASCII文字以外の知識があいまいなのでメモ&lt;/p&gt;
&lt;p&gt;ASCII
0x00-0x7fの値で表される&lt;a href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9"&gt;文字コード&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;マルチバイト文字　1ビットと2ビットが混じっている形式&lt;br&gt;
Shift-JIS&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/EUC"&gt;EUC&lt;/a&gt;-JP&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/ISO-2022-JP"&gt;ISO-2022-JP&lt;/a&gt;&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/UTF-8"&gt;UTF-8&lt;/a&gt;&lt;br&gt;
一バイト目が0x80-0xffで始まる。&lt;br&gt;
int isleadbyte(int c) マルチバイトの一文字目を判定する。&lt;br&gt;
これが0以外の値を返すとき後ろの値も一緒に扱うとうまくいくようだ。&lt;/p&gt;
&lt;p&gt;ワイド文字　すべて2ビット(&lt;a href="http://d.hatena.ne.jp/keyword/Windows"&gt;Windows&lt;/a&gt;では)の形式　wchar_tであらわす。&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/UTF-16"&gt;UTF-16&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TCHAR 状況にあわせてマルチバイト・ワイドに切り替わってくれる型&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 03 Dec 2007 00:52:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-12-03:/200712031196697167.html</guid></item><item><title>tftpboot成功</title><link>/200711181195406346.html</link><description>&lt;p&gt;余り物のCPUとマザーボードをtftpbootで起動するようにしてみた。 
&lt;a href="http://d.hatena.ne.jp/keyword/DHCP"&gt;DHCP&lt;/a&gt;の設定でpxebootで対称のマシンが起動するようにしておく。&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/IPv6"&gt;IPv6&lt;/a&gt;が動作していると上手くいかないようなので切っておく。&lt;br&gt;
ここの&lt;a href="http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%CD%A5%EB"&gt;カーネル&lt;/a&gt;のオプションでルート&lt;a href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%A4%A5%EB%A5%B7%A5%B9%A5%C6%A5%E0"&gt;ファイルシステム&lt;/a&gt;を&lt;a href="http://d.hatena.ne.jp/keyword/nfs"&gt;nfs&lt;/a&gt;でマウントするようにしておく。&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%CD%A5%EB"&gt;カーネル&lt;/a&gt;は2.6.22.10でnfsrootをサポート、&lt;a href="http://d.hatena.ne.jp/keyword/NIC"&gt;NIC&lt;/a&gt;ドライバを組み込むようにした。&lt;br&gt;
ルート&lt;a href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%A4%A5%EB%A5%B7%A5%B9%A5%C6%A5%E0"&gt;ファイルシステム&lt;/a&gt;はdebootstrapでつくり、&lt;a href="http://d.hatena.ne.jp/keyword/chroot"&gt;chroot&lt;/a&gt;でいろいろ設定。&lt;/p&gt;
&lt;p&gt;動いてるのはCPUのファンだけなので結構静か。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 18 Nov 2007 02:19:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-11-18:/200711181195406346.html</guid></item><item><title>DirectShowムービー表示</title><link>/200711091194621506.html</link><description>&lt;p&gt;ただムービを再生するだけだと別ウィンドウで表示されてしまうのでこれをIvideoWindowで操作して子ウィンドウとすれば任意のウィンドウ内でムービーを再生させることができる。&lt;/p&gt;
&lt;p&gt;IGraphBuilder::QueryInterface()でIVideoWindowを作れるのだが上手くいかない。。。&lt;/p&gt;
&lt;p&gt;IGraphBuilder::RenderFile()の後に&lt;br&gt;
IGraphBuilder::QueryInterface()でIVideoWindowを作らないとダメなようだ。&lt;/p&gt;
&lt;p&gt;次に&lt;br&gt;
音は出るが画像は出ない状態に。。。&lt;br&gt;
しかし、タイトルバーをクリックし続けると、表示される。&lt;/p&gt;
&lt;p&gt;ムービーは子ウィンドウとして表示されるので、&lt;br&gt;
親ウィンドウとなるウィンドウスタイルに&lt;br&gt;
WS_CLIPCHILDREN&lt;br&gt;
を指定しなければならなかった。
考えてみたら当然だったが･･･&lt;/p&gt;
&lt;p&gt;参考リンク&lt;br&gt;
&lt;a href="http://www.geekpage.jp/programming/directshow/renderfile.php"&gt;http://www.geekpage.jp/programming/directshow/renderfile.php&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Fri, 09 Nov 2007 00:18:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-11-09:/200711091194621506.html</guid></item><item><title>sambaが。。</title><link>/200711031194114825.html</link><description>&lt;p&gt;いろいろいじってたら&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/Samba"&gt;Samba&lt;/a&gt;と&lt;a href="http://d.hatena.ne.jp/keyword/DHCP"&gt;DHCP&lt;/a&gt;が調子悪くなった・・・・&lt;/p&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/DHCP"&gt;DHCP&lt;/a&gt;は何とか復旧したものの&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/Samba"&gt;Samba&lt;/a&gt;の方は。。。orz&lt;/p&gt;
&lt;p&gt;ついでにようやくsargeから&lt;a href="http://d.hatena.ne.jp/keyword/etch"&gt;etch&lt;/a&gt;へアップグレードした。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 03 Nov 2007 03:33:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-11-03:/200711031194114825.html</guid></item><item><title>デバッグ用のウィンドウ</title><link>/200710311193846067.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0"&gt;デバッグ&lt;/a&gt;情報の表示用にウィンドウをもう1つ作ろうと思って&lt;br&gt;
もう1つCreateWindowでつくってみたが･･･&lt;/p&gt;
&lt;p&gt;タスクバーに表示はされるが、肝心のウィンドウが出てこない・・・&lt;br&gt;
同一プロセスではだめなのか。。。と考えてしまったが&lt;/p&gt;
&lt;p&gt;CW_USEDEFAULT + 600&lt;br&gt;
とかやってたのがまずかったみたい、ウィンドウがどっかに行ってたみたいだ････&lt;/p&gt;
&lt;p&gt;CW_USEDEFAULT&lt;br&gt;
にしたら出てきた。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://f.hatena.ne.jp/hiroki0/20071101005339"&gt;&lt;img alt="f:id:hiroki0:20071101005339p:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20071101/20071101005339.png" title="f:id:hiroki0:20071101005339p:image"&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Wed, 31 Oct 2007 00:54:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-10-31:/200710311193846067.html</guid></item><item><title>DHCPサーバー構築</title><link>/200710291193673267.html</link><description>&lt;p&gt;いままで&lt;a href="http://d.hatena.ne.jp/keyword/%A5%EB%A1%BC%A5%BF%A1%BC"&gt;ルーター&lt;/a&gt;の&lt;a href="http://d.hatena.ne.jp/keyword/DHCP"&gt;DHCP&lt;/a&gt;サーバー機能を使っていたのだが&lt;br&gt;
nfsboot環境を構築するために、&lt;a href="http://d.hatena.ne.jp/keyword/%B8%BC%C8%A2"&gt;玄箱&lt;/a&gt;で&lt;a href="http://d.hatena.ne.jp/keyword/DHCP"&gt;DHCP&lt;/a&gt;サーバーを立ててみた。&lt;/p&gt;
&lt;p&gt;aptで&lt;a href="http://d.hatena.ne.jp/keyword/dhcp"&gt;dhcp&lt;/a&gt;をインストールしてdhcpd.confをいじる。
編集後はこんな感じになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;shared-network KURO-DHCP{
default-lease-time 6000;
max-lease-time 72000;
    subnet 192.168.1.0 netmask 255.255.255.0 {
        range 192.168.1.100 192.168.1.200;
        option domain-name-servers (ルーターのIP);
        option routers (ルーターのIP);
        option broadcast-address 192.168 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Mon, 29 Oct 2007 00:54:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-10-29:/200710291193673267.html</guid></item><item><title>スクリプトエンジン</title><link>/200708281188257009.html</link><description>&lt;p&gt;xml形式のスクリプトを処理するエンジンを作ってみる。
パーサーにはxercecをつかって、デバッガでさぐりさぐり組んでみた。&lt;br&gt;
とりあえず、文字列と画像の表示が出来るようになった。。。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;Shift_JIS&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;simplebox&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;page&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;text&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;img\test.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/page&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/simplebox&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://f.hatena.ne.jp/hiroki0/20070828082205"&gt;&lt;img alt="f:id:hiroki0:20070828082205j:image" src="http://cdn-ak.f.st-hatena.com/images/fotolife/h/hiroki0/20070828/20070828082205.jpg" title="f:id:hiroki0:20070828082205j:image"&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Tue, 28 Aug 2007 08:23:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-08-28:/200708281188257009.html</guid></item><item><title>Debian etchへバージョンアップ</title><link>/200708141187191261.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Debian"&gt;Debian&lt;/a&gt;のバージョンをsargeから&lt;a href="http://d.hatena.ne.jp/keyword/etch"&gt;etch&lt;/a&gt;へあげたくなったので、  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get upgrade  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;してみたけど、エラーが出た。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://90h.dip.jp/archives/2007/05/hgetch.html"&gt;http://90h.dip.jp/archives/2007/05/hgetch.html&lt;/a&gt;&lt;br&gt;
↑の方法でいけるみたいだ。&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%CD%A5%EB"&gt;カーネル&lt;/a&gt;が2.6じゃないとだめなのか？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Tue, 14 Aug 2007 00:21:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-08-14:/200708141187191261.html</guid></item><item><title>Vista用のアイコン</title><link>/200706161182012117.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/Windows%20Vista"&gt;Windows
Vista&lt;/a&gt;では、256x256までの&lt;a href="http://d.hatena.ne.jp/keyword/PNG"&gt;PNG&lt;/a&gt;圧縮の、アイコンを扱える。&lt;br&gt;
これは、普通に&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB"&gt;コンパイル&lt;/a&gt;しようとすると&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/error"&gt;error&lt;/a&gt; RC2176 : old DIB
in･･･&lt;br&gt;
というエラーになるので、別の方法をとる必要があります。&lt;br&gt;
下の2つの方法があります。&lt;/p&gt;
&lt;p&gt;・VisualStadioのパッチを当てる&lt;br&gt;
・ダミーのアイコンで&lt;a href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB"&gt;コンパイル&lt;/a&gt;しておき、後に入れ替える&lt;/p&gt;
&lt;p&gt;2番目のダミーのアイコンを使用する方法を、解説します。&lt;/p&gt;
&lt;p&gt;まず、IcoFXなどで&lt;a href="http://d.hatena.ne.jp/keyword/Vista"&gt;Vista&lt;/a&gt;用のアイコンの作製を行います。&lt;br&gt;
『IcoFX』&lt;a href="http://icofx.xhost.ro/"&gt;http://icofx.xhost.ro/&lt;/a&gt;&lt;br&gt;
自分は、このとき256x256と46x46,32x32,16x16のサイズも一緒に作っておきました。&lt;br&gt;
こうするとXPでもアイコンが表示されるようです。&lt;/p&gt;
&lt;p&gt;次に、ReplaceVistaIcon.exeをつかってアイコンを入れ替えました。&lt;br&gt;
『ReplaceVistaIcon.exe』&lt;a href="http://www.rw-designer.com/compile-vista-icon"&gt;http://www.rw-designer.com/compile-vista-icon …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 16 Jun 2007 01:41:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-06-16:/200706161182012117.html</guid></item><item><title>IEコンポーネント</title><link>/200706141181830810.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/IE%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8"&gt;IEコンポーネント&lt;/a&gt;を使う場合の注意&lt;/p&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/VC%2B%2B"&gt;VC++&lt;/a&gt;2005の場合&lt;br&gt;
CreateWindow( \"AtlAxWin80\", \"Shell.Explorer.2\", ････&lt;/p&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/VC%2B%2B"&gt;VC++&lt;/a&gt;2003.netの場合&lt;br&gt;
CreateWindow( \"AtlAxWin71\", \"Shell.Explorer.2\", ････&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Thu, 14 Jun 2007 23:20:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-06-14:/200706141181830810.html</guid></item><item><title>WinAPIによる非矩形ウィンドウの実現</title><link>/200705311180621839.html</link><description>&lt;p&gt;基本的な流れは、以下の通り。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;リージョンを作る。  &lt;/li&gt;
&lt;li&gt;SetWindowRgnでリージョンの形に添ったウィンドウの生成。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SetWindowRgnの第一引数は、ウィンドウハンドル、&lt;br&gt;
第二引数は、リージョン、&lt;br&gt;
第三引数は、再描画するかどうか
これだけでoｋ&lt;/p&gt;
&lt;p&gt;・ビットマップからリージョンを作る&lt;br&gt;
&lt;a href="http://techtips.belution.com/ja/vc/0010/"&gt;http://techtips.belution.com/ja/vc/0010/&lt;/a&gt;&lt;br&gt;
↑で、画像からリージョンを作る方法を説明している。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/DDB"&gt;DDB&lt;/a&gt;は、デバイスに依存するビットマップ&lt;br&gt;
・直接加工できない&lt;br&gt;
・ハードウェア処理に適している&lt;br&gt;
・そのため、ハードウェアごとに形式が異なることがある&lt;/p&gt;
&lt;p&gt;DIBは、デバイスに依存しないビットマップ&lt;br&gt;
・1ドットにアクセスできる&lt;br&gt;
・&lt;a href="http://d.hatena.ne.jp/keyword/BMP"&gt;BMP&lt;/a&gt;ファイルからの変換またはその逆も簡単&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Thu, 31 May 2007 23:30:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-05-31:/200705311180621839.html</guid></item><item><title>共有ドライブ完成</title><link>/200705081178633500.html</link><description>&lt;p&gt;SWATで&lt;a href="http://d.hatena.ne.jp/keyword/Samba"&gt;Samba&lt;/a&gt;の設定をして、&lt;br&gt;
ネットの情報を見ながら、&lt;br&gt;
問題なく共有ドライブが完成。&lt;/p&gt;
&lt;p&gt;次は、NTPを入れて、時刻あわせをした。&lt;br&gt;
ここも、同じく問題なし。&lt;/p&gt;
&lt;p&gt;しかし、&lt;br&gt;
&lt;a href="http://d.hatena.ne.jp/keyword/%B8%BC%C8%A2"&gt;玄箱&lt;/a&gt;が、Sleep状態に入ってしまい、&lt;br&gt;
そのまま元に戻らなくなるという症状が発覚。&lt;br&gt;
おそらく、&lt;a href="http://d.hatena.ne.jp/keyword/Debian"&gt;Debian&lt;/a&gt;化する前Sleepするように設定していたので&lt;br&gt;
それが原因かな･･･&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Tue, 08 May 2007 23:11:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-05-08:/200705081178633500.html</guid></item><item><title>Samba起動</title><link>/200705061178454893.html</link><description>&lt;p&gt;玄箱のセットアップCDについていた、開発ツール類を入れようとしたが、なぜか展開できなかったので断念。&lt;/p&gt;
&lt;p&gt;しょうがないので、apt-getを、使えるようにするしかない･･･&lt;br&gt;
sources.list の「woody」を「sarge」に書き換え、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Samba
# ded　ｈttp://everybody.good-day.net/\~nsaito samba3  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;をリストに追加して、&lt;br&gt;
apt-getでインストールが完了。
次に、SWATをインストールした。&lt;br&gt;
今日は、ここまでで終了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 06 May 2007 21:34:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-05-06:/200705061178454893.html</guid></item><item><title>Xファイルのフォーマット(2)</title><link>/200703251174775823.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//これはコメントです。  
#これもコメントです。  
//この例は、正しいポリゴンでない可能性があります。  
Mesh (ここにメッシュの名前をつけることもできる。){  
    3; //頂点の数  
    0.00000;271.38129;0.00000;,　//頂点1の座標  
    0.00000;240.92551;-153.11031;, //頂点2の座標  
    0.00000;-128.71561;-400.09680;; //頂点3の座標

    1; //面の数  
    3;0,1,2;; //インデックスの数;インデックスの配列

    //ここまでが必須要素です。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これに付随してオプションのデータをつけることができます。&lt;br&gt;
使用できるオプションのデータは、&lt;br&gt;
･MeshFaceWraps (今では使われてないらしい)&lt;br&gt;
･MeshTextureCoords&lt;br&gt;
･MeshNormals&lt;br&gt;
･MeshVertexColors&lt;br&gt;
･MeshMaterialList&lt;br&gt;
である。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/////////////////////////////////////////////////////////////  
//MeshTextureCoordsはメッシュのテスクチャ座標を定義する。  
template MeshTextureCoords …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sun, 25 Mar 2007 07:37:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-03-25:/200703251174775823.html</guid></item><item><title>Xファイルのフォーマット(1)</title><link>/200703241174740494.html</link><description>&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/X%A5%D5%A5%A1%A5%A4%A5%EB"&gt;Xファイル&lt;/a&gt;の一番上には、
xof 0302txt 0064 というような可変長ヘッダーがある。&lt;br&gt;
\"xof\"は、マジック番号と呼ばれる。&lt;br&gt;
\"03\"は、メジャーバージョン3をあらわす。&lt;br&gt;
\"02\"は、マイナーバージョン2をあらわす。&lt;br&gt;
\"txt\"は、その&lt;a href="http://d.hatena.ne.jp/keyword/X%A5%D5%A5%A1%A5%A4%A5%EB"&gt;Xファイル&lt;/a&gt;が、テキスト形式であることをあらわす。&lt;br&gt;
\"txt\"の代わりに、バイナリファイルの\"bin\"、MSZip圧縮テキストの\"tzip\"、MSZip圧縮バイナリの\"bzip\"、が選べる。&lt;br&gt;
\"0064\"は64ビット&lt;a href="http://d.hatena.ne.jp/keyword/%C9%E2%C6%B0%BE%AE%BF%F4"&gt;浮動小数&lt;/a&gt;点をあらわす。&lt;br&gt;
代わりに、\"0032\"を選ぶとができる。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/keyword/X%A5%D5%A5%A1%A5%A4%A5%EB"&gt;Xファイル&lt;/a&gt;はテンプレート形式で書かれている。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;template {    
  メンバー1;  
  メンバー2;  
  .  
  .  
  .  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;template Vector {  
  &amp;lt;3D82AB5E-62DA-11cf-AB39-0020AF71E433&amp;gt;  
  FLOAT x;  
  FLOAT y;  
  FLOAT …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">waura</dc:creator><pubDate>Sat, 24 Mar 2007 21:48:00 +0900</pubDate><guid isPermaLink="false">tag:None,2007-03-24:/200703241174740494.html</guid></item></channel></rss>