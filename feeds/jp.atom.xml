<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>waura's blog - JP</title><link href="https://waura.github.io/" rel="alternate"></link><link href="https://waura.github.io/feeds/jp.atom.xml" rel="self"></link><id>https://waura.github.io/</id><updated>2019-03-31T22:00:00+09:00</updated><entry><title>ESP32-DevKitCでI2C接続が正しくできていることを確認する</title><link href="https://waura.github.io/esp32-devkitcdei2cjie-sok-gazheng-shikudekiteirukotowoque-ren-suru.html" rel="alternate"></link><published>2019-03-31T22:00:00+09:00</published><updated>2019-03-31T22:00:00+09:00</updated><author><name>waura</name></author><id>tag:waura.github.io,2019-03-31:/esp32-devkitcdei2cjie-sok-gazheng-shikudekiteirukotowoque-ren-suru.html</id><summary type="html">&lt;h1&gt;はじめに&lt;/h1&gt;
&lt;p&gt;I2C接続が必要なデバイスの場合、テスター等で確認することはできないので正しく接続できているか確認するのが面倒です。&lt;/p&gt;
&lt;p&gt;ESP-IDFに便利なツール(&lt;a href="https://github.com/espressif/esp-idf/tree/master/examples/peripherals/i2c/i2c_tools"&gt;i2c_tools&lt;/a&gt;)があったので試してみます。このツールでは、サンプルプログラムをESP32-DevKitCに転送し、シリアルコンソール上でコマンドを実行することで、I2Cバスに接続されているデバイスの検知や、レジスタの読み書きが簡単にできます。&lt;/p&gt;
&lt;p&gt;今回は、温度・湿度・気圧を測定できるセンサーのBME280をESP32-DevKitCにI2Cで接続し、i2c_toolsで動作を確認してみます。&lt;/p&gt;
&lt;h1&gt;回路図&lt;/h1&gt;
&lt;p&gt;i2c_toolsの&lt;a href="https://github.com/espressif/esp-idf/tree/master/examples/peripherals/i2c/i2c_tools"&gt;README.md&lt;/a&gt;によるとデフォルトのピンアサインは下記のようになっています。
ESP32 I2C MasterがESP32-DevKitC側で、Sensorが接続するデバイス側のピンです。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;SDA&lt;/th&gt;
&lt;th&gt;SCL&lt;/th&gt;
&lt;th&gt;GND&lt;/th&gt;
&lt;th&gt;Other&lt;/th&gt;
&lt;th&gt;VCC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ESP32 I2C Master&lt;/td&gt;
&lt;td&gt;GPIO18&lt;/td&gt;
&lt;td&gt;GPIO19&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;3.3V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sensor&lt;/td&gt;
&lt;td&gt;SDA&lt;/td&gt;
&lt;td&gt;SCL&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;WAK&lt;/td&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;このピンアサインは、ツールをESP32-DevKitCに書き込み後、i2cconfigコマンドで変更することもできますが、今回はデフォルトのピンアサインで接続します。&lt;/p&gt;
&lt;p&gt;下記のように接続しました …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;はじめに&lt;/h1&gt;
&lt;p&gt;I2C接続が必要なデバイスの場合、テスター等で確認することはできないので正しく接続できているか確認するのが面倒です。&lt;/p&gt;
&lt;p&gt;ESP-IDFに便利なツール(&lt;a href="https://github.com/espressif/esp-idf/tree/master/examples/peripherals/i2c/i2c_tools"&gt;i2c_tools&lt;/a&gt;)があったので試してみます。このツールでは、サンプルプログラムをESP32-DevKitCに転送し、シリアルコンソール上でコマンドを実行することで、I2Cバスに接続されているデバイスの検知や、レジスタの読み書きが簡単にできます。&lt;/p&gt;
&lt;p&gt;今回は、温度・湿度・気圧を測定できるセンサーのBME280をESP32-DevKitCにI2Cで接続し、i2c_toolsで動作を確認してみます。&lt;/p&gt;
&lt;h1&gt;回路図&lt;/h1&gt;
&lt;p&gt;i2c_toolsの&lt;a href="https://github.com/espressif/esp-idf/tree/master/examples/peripherals/i2c/i2c_tools"&gt;README.md&lt;/a&gt;によるとデフォルトのピンアサインは下記のようになっています。
ESP32 I2C MasterがESP32-DevKitC側で、Sensorが接続するデバイス側のピンです。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;SDA&lt;/th&gt;
&lt;th&gt;SCL&lt;/th&gt;
&lt;th&gt;GND&lt;/th&gt;
&lt;th&gt;Other&lt;/th&gt;
&lt;th&gt;VCC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ESP32 I2C Master&lt;/td&gt;
&lt;td&gt;GPIO18&lt;/td&gt;
&lt;td&gt;GPIO19&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;3.3V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sensor&lt;/td&gt;
&lt;td&gt;SDA&lt;/td&gt;
&lt;td&gt;SCL&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;WAK&lt;/td&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;このピンアサインは、ツールをESP32-DevKitCに書き込み後、i2cconfigコマンドで変更することもできますが、今回はデフォルトのピンアサインで接続します。&lt;/p&gt;
&lt;p&gt;下記のように接続しました。&lt;/p&gt;
&lt;p&gt;&lt;a href="../images/esp32/ESP32-BME280.png"&gt;&lt;img alt="" src="../images/esp32/ESP32-BME280.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;ESP-IDFのセットアップとi2c_toolsのビルド・書き込み&lt;/h1&gt;
&lt;h2&gt;ESP-IDFの取得&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/espressif/esp-idf.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;i2c_toolsのビルド設定&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;IDF_PATH&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;git cloneしたesp-idfのディレクトリパスを指定&lt;span class="o"&gt;)&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; esp-idf/examples/peripherals/i2c/i2c_tools
$ make menuconfig
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;/dev/ttyUSB0 を
/dev/cu.SLAB_USBtoUART&lt;/p&gt;
&lt;h2&gt;i2c_toolsのビルド・転送&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make -j4 flash monitor
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;I2Cバスに接続されているデバイスのアドレスをチェックする&lt;/h1&gt;
&lt;p&gt;i2cdetectコマンドでI2Cバスに接続されているデバイスのアドレスを取得できます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The 7-bit device address is 111011x. The 6 MSB bits are fixed. The last bit is changeable by SDO value and can be changed during operation. Connecting SDO to GND results n slave address 1110110 (0x76); connection it to VDDIO results in slave address 1110111 (0x77), which is the same as BMP280’s I²C address. The SDO pin cannot be left loating;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;データシート &lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt; には、SDOにGNDを接続した場合は0x76、VDDIOを接続した場合は0x77のアドレスになると記載があります。
BME280のSDOにGNDを接続しているので、アドレスは0x76で取得できるはずです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;esp32&amp;gt; i2cdetect
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
70: -- -- -- -- -- -- 76 -- -- -- -- -- -- -- -- --
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;正常に0x76が取得できています。&lt;/p&gt;
&lt;h1&gt;レジスタを読む&lt;/h1&gt;
&lt;p&gt;レジスタを読むには、i2cgetコマンドを使用します。&lt;/p&gt;
&lt;p&gt;チップのIDを取得してみます。BME280の場合は0x60が返ってくるはずです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;esp32&amp;gt; i2cget -c 0x76 -r 0xd0 -l 1
0x60
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;正しく返ってきているのが確認できました。&lt;/p&gt;
&lt;h1&gt;レジスタに書き込む&lt;/h1&gt;
&lt;p&gt;今回は使用しませんでしたが、レジスタに書き込むにはi2csetコマンドを使用します。&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ESP32-DevKitCでI2C接続回路が正しく組めているか確認するにはi2c_toolsが便利です&lt;/li&gt;
&lt;li&gt;i2c_toolsでは、I2Cバスに接続されているデバイスの検知、レジスタの読み書きが可能です&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;&lt;a href="https://ae-bst.resource.bosch.com/media/_tech/media/datasheets/BST-BME280-DS002.pdf"&gt;BME280–Data sheet&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="ESP32"></category></entry><entry><title>ESP32でAmazon FreeRTOSを使用してLEDをチカチカさせてみた</title><link href="https://waura.github.io/esp32deamazon-freertoswoshi-yong-shiteledwochikachikasasetemita.html" rel="alternate"></link><published>2019-03-19T22:00:00+09:00</published><updated>2019-03-19T22:00:00+09:00</updated><author><name>waura</name></author><id>tag:waura.github.io,2019-03-19:/esp32deamazon-freertoswoshi-yong-shiteledwochikachikasasetemita.html</id><summary type="html">&lt;h1&gt;はじめに&lt;/h1&gt;
&lt;p&gt;ESP32でAmazon FreeRTOSを使ってLEDチカチカさせる手順についてまとめます。&lt;/p&gt;
&lt;p&gt;下記の公式ドキュメント等を参照してESP32にfirmwareの転送しMQTTのPublishができていることを前提としています。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/ja_jp/freertos/latest/userguide/getting_started_espressif.html"&gt;Espressif ESP32-DevKitC と ESP-WROVER-KIT の開始方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;デモのesp32_devkitc_esp_wrover_kitに手を加える形でLチカを実現します。&lt;/p&gt;
&lt;h1&gt;ESP32でのGPIOの操作について&lt;/h1&gt;
&lt;p&gt;ESP32向けの公式ライブラリとして&lt;a href="https://docs.espressif.com/projects/esp-idf/en/latest/"&gt;ESP-IDF&lt;/a&gt;が用意されています。
ESP-IDFはAmazon FreeRTOSに組み込まれているので、これを利用してGPIOを操作します。&lt;/p&gt;
&lt;p&gt;ESP-IDFを使用したGPIOの操作に関しては、ESP-IDFのリファレンス(&lt;a href="https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/gpio.html"&gt;API Reference - Peripherals API - GPIO &amp;amp; RTC GPIO&lt;/a&gt;)に説明があります。&lt;/p&gt;
&lt;p&gt;また、サンプルコードもGitHub(&lt;a href="https://github.com/espressif/esp-idf/tree/cf5dbadf4f25b395887238a7d4d8251c279afa8c/examples/peripherals/gpio"&gt;ESP-IDF GPIO Sample&lt;/a&gt;)で公開されています。&lt;/p&gt;
&lt;h1&gt;回路構成&lt;/h1&gt;
&lt;p&gt;GPIO4を制御してLEDをチカチカさせることにします。
GPIO4とGNDの間にLEDと抵抗を入れてつなぎます。抵抗の大きさは適当です。&lt;/p&gt;
&lt;p&gt;&lt;a href="../images/esp32/ESP32-LED.png"&gt;&lt;img alt="" src="../images/esp32/ESP32-LED.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;コードの修正&lt;/h1&gt;
&lt;p&gt;esp32_devkitc_esp_wrover_kitのコードの修正を行います。
書き換え対象は、&lt;a href="https://github.com/aws/amazon-freertos/blob/master/demos/espressif/esp32_devkitc_esp_wrover_kit/common/application_code/main.c"&gt;amazon-freertos/demos/espressif/esp32_devkitc_esp_wrover_kit/common/application_code/main.c&lt;/a&gt; です。&lt;/p&gt;
&lt;p&gt;元々のサンプルコードはDEMO_RUNNER_RunDemos …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;はじめに&lt;/h1&gt;
&lt;p&gt;ESP32でAmazon FreeRTOSを使ってLEDチカチカさせる手順についてまとめます。&lt;/p&gt;
&lt;p&gt;下記の公式ドキュメント等を参照してESP32にfirmwareの転送しMQTTのPublishができていることを前提としています。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/ja_jp/freertos/latest/userguide/getting_started_espressif.html"&gt;Espressif ESP32-DevKitC と ESP-WROVER-KIT の開始方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;デモのesp32_devkitc_esp_wrover_kitに手を加える形でLチカを実現します。&lt;/p&gt;
&lt;h1&gt;ESP32でのGPIOの操作について&lt;/h1&gt;
&lt;p&gt;ESP32向けの公式ライブラリとして&lt;a href="https://docs.espressif.com/projects/esp-idf/en/latest/"&gt;ESP-IDF&lt;/a&gt;が用意されています。
ESP-IDFはAmazon FreeRTOSに組み込まれているので、これを利用してGPIOを操作します。&lt;/p&gt;
&lt;p&gt;ESP-IDFを使用したGPIOの操作に関しては、ESP-IDFのリファレンス(&lt;a href="https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/gpio.html"&gt;API Reference - Peripherals API - GPIO &amp;amp; RTC GPIO&lt;/a&gt;)に説明があります。&lt;/p&gt;
&lt;p&gt;また、サンプルコードもGitHub(&lt;a href="https://github.com/espressif/esp-idf/tree/cf5dbadf4f25b395887238a7d4d8251c279afa8c/examples/peripherals/gpio"&gt;ESP-IDF GPIO Sample&lt;/a&gt;)で公開されています。&lt;/p&gt;
&lt;h1&gt;回路構成&lt;/h1&gt;
&lt;p&gt;GPIO4を制御してLEDをチカチカさせることにします。
GPIO4とGNDの間にLEDと抵抗を入れてつなぎます。抵抗の大きさは適当です。&lt;/p&gt;
&lt;p&gt;&lt;a href="../images/esp32/ESP32-LED.png"&gt;&lt;img alt="" src="../images/esp32/ESP32-LED.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;コードの修正&lt;/h1&gt;
&lt;p&gt;esp32_devkitc_esp_wrover_kitのコードの修正を行います。
書き換え対象は、&lt;a href="https://github.com/aws/amazon-freertos/blob/master/demos/espressif/esp32_devkitc_esp_wrover_kit/common/application_code/main.c"&gt;amazon-freertos/demos/espressif/esp32_devkitc_esp_wrover_kit/common/application_code/main.c&lt;/a&gt; です。&lt;/p&gt;
&lt;p&gt;元々のサンプルコードはDEMO_RUNNER_RunDemos()でMQTTの通信を行っていましたが、そこをコメントアウトしてかわりにLチカのコードを追加します。&lt;/p&gt;
&lt;h2&gt;変更前&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  /* Run all demos. */
  DEMO_RUNNER_RunDemos();
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;変更後&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  /* Run all demos. */
  //DEMO_RUNNER_RunDemos();

  gpio_set_direction(GPIO_NUM_4, GPIO_MODE_OUTPUT);
  int cnt = 0;
  while (true) {
      gpio_set_level(GPIO_NUM_4, cnt++ % 2);
      vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;実行結果&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=aUuxzuNsgTo"&gt;&lt;img alt="Lチカ" src="https://img.youtube.com/vi/aUuxzuNsgTo/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="AWS"></category></entry><entry><title>Cisco Catalyst 2960L を使用したリンクアグリゲーションの設定</title><link href="https://waura.github.io/cisco-catalyst-2960l-woshi-yong-shitarinkuagurigeshiyonnoshe-ding.html" rel="alternate"></link><published>2019-01-14T21:36:00+09:00</published><updated>2019-01-14T21:36:00+09:00</updated><author><name>waura</name></author><id>tag:waura.github.io,2019-01-14:/cisco-catalyst-2960l-woshi-yong-shitarinkuagurigeshiyonnoshe-ding.html</id><summary type="html">&lt;h1&gt;ファイルサーバーとL2スィッチ間のリンクアグリゲーションを設定する&lt;/h1&gt;
&lt;p&gt;自宅用に&lt;a href="https://www.cisco.com/c/en/us/products/switches/catalyst-2960-l-series-switches/index.html"&gt;Cisco Catalyst 2960L&lt;/a&gt;を手に入れました。
このL2スイッチではリンクアグリゲーションを設定することができるので、ファイルサーバーとスイッチ間でリンクアグリゲーションを設定します。&lt;/p&gt;
&lt;p&gt;これにより、帯域を増やすことができ複数のクライアントが同時にアクセスしてもパフォーマンスの低下を防げることが期待できます。&lt;/p&gt;
&lt;h2&gt;リンクアグリゲーションとは&lt;/h2&gt;
&lt;p&gt;リンクアグリゲーション(IEEE 802.3ad)とは、複数の物理リンクをまとめて1本の論理リンクとして扱うことの技術です。
物理リンクの本数分の帯域を増やすことができる他、複数本の物理リンクが切断されてしまっても残りのリンクで通信を継続できるため、耐障害性も向上します。&lt;/p&gt;
&lt;p&gt;CiscoではEtherCahnnelと呼ばれています。&lt;/p&gt;
&lt;h2&gt;構成&lt;/h2&gt;
&lt;p&gt;&lt;a href="./images/link_aggregatoin.png"&gt;&lt;img alt="link_aggregation" src="../images/link_aggregation.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上記のようにファイルサーバーとスイッチ間を2本のLANケーブルで接続します。
ファイルサーバー側のLANポート2つと、スイッチ側のLANポート2つを、それぞれ接続します。&lt;/p&gt;
&lt;h1&gt;設定&lt;/h1&gt;
&lt;h2&gt;ファイルサーバー側&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://netplan.io/"&gt;Netplan&lt;/a&gt;を使用して設定を行います。
enp0s31f6とenp8s0の2つのポートをまとめたbond0というdeviceを作成します。
modeは、IEEE802.3ad準拠で通信できるよう"802.3ad"を設定しています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vi /etc/netplan/01-netcfg.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# This file describes the …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;ファイルサーバーとL2スィッチ間のリンクアグリゲーションを設定する&lt;/h1&gt;
&lt;p&gt;自宅用に&lt;a href="https://www.cisco.com/c/en/us/products/switches/catalyst-2960-l-series-switches/index.html"&gt;Cisco Catalyst 2960L&lt;/a&gt;を手に入れました。
このL2スイッチではリンクアグリゲーションを設定することができるので、ファイルサーバーとスイッチ間でリンクアグリゲーションを設定します。&lt;/p&gt;
&lt;p&gt;これにより、帯域を増やすことができ複数のクライアントが同時にアクセスしてもパフォーマンスの低下を防げることが期待できます。&lt;/p&gt;
&lt;h2&gt;リンクアグリゲーションとは&lt;/h2&gt;
&lt;p&gt;リンクアグリゲーション(IEEE 802.3ad)とは、複数の物理リンクをまとめて1本の論理リンクとして扱うことの技術です。
物理リンクの本数分の帯域を増やすことができる他、複数本の物理リンクが切断されてしまっても残りのリンクで通信を継続できるため、耐障害性も向上します。&lt;/p&gt;
&lt;p&gt;CiscoではEtherCahnnelと呼ばれています。&lt;/p&gt;
&lt;h2&gt;構成&lt;/h2&gt;
&lt;p&gt;&lt;a href="./images/link_aggregatoin.png"&gt;&lt;img alt="link_aggregation" src="../images/link_aggregation.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上記のようにファイルサーバーとスイッチ間を2本のLANケーブルで接続します。
ファイルサーバー側のLANポート2つと、スイッチ側のLANポート2つを、それぞれ接続します。&lt;/p&gt;
&lt;h1&gt;設定&lt;/h1&gt;
&lt;h2&gt;ファイルサーバー側&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://netplan.io/"&gt;Netplan&lt;/a&gt;を使用して設定を行います。
enp0s31f6とenp8s0の2つのポートをまとめたbond0というdeviceを作成します。
modeは、IEEE802.3ad準拠で通信できるよう"802.3ad"を設定しています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vi /etc/netplan/01-netcfg.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# This file describes the network interfaces available on your system
# For more information, see netplan(5).
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s31f6:
      dhcp4: false
      dhcp6: false
    enp8s0:
      dhcp4: false
      dhcp6: false
  bonds:
    bond0:
      dhcp4: false
      dhcp6: false
      interfaces:
        - enp0s31f6
        - enp8s0
      addresses: [192.168.1.2/24]
      gateway4: 192.168.1.1
      parameters:
        mode: 802.3ad
        lacp-rate: fast
        mii-monitor-interval: 100
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考URL:
 - &lt;a href="https://netplan.io/examples#bonding"&gt;Netplan configuration examples - Bonding&lt;/a&gt;
 - &lt;a href="https://netplan.io/reference#properties-for-device-type-bonds"&gt;Netplan reference - Properties for device type bonds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;設定ファイル編集後、変更を下記コマンドで適用します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo netplan apply
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;L2スイッチ側&lt;/h2&gt;
&lt;p&gt;Catalyst 2960L 側の設定です。
グローバルコンフィグレーションモードへ移行し、Gi0/1とGi0/2のポートを指定しインターフェースコンフィグレーションモードに移行します。&lt;/p&gt;
&lt;p&gt;switchportコマンドでレイヤー2のポートに設定し、channel-groupコマンドでリンクアグリゲーション(EtherChannel)を形成するように設定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Switch&amp;gt; enable
Switch# configure terminal
Switch(config)#interface range Gi0/1,Gi0/2
Switch(config-if-range)#switchport
Switch(config-if-range)#channel-group 1 mode active
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;パフォーマンス測定&lt;/h1&gt;
&lt;h2&gt;リンクアグリゲーション設定前&lt;/h2&gt;
&lt;h3&gt;クライアント1台で計測&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% iperf3 -c 192.168.1.2 -p 18080&lt;/span&gt;
&lt;span class="c"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;           &lt;span class="n"&gt;Transfer&lt;/span&gt;     &lt;span class="n"&gt;Bitrate&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.00&lt;/span&gt;  &lt;span class="nb"&gt;sec&lt;/span&gt;  &lt;span class="mf"&gt;1.09&lt;/span&gt; &lt;span class="n"&gt;GBytes&lt;/span&gt;   &lt;span class="mi"&gt;939&lt;/span&gt; &lt;span class="n"&gt;Mbits&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sec&lt;/span&gt;                  &lt;span class="n"&gt;sender&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.00&lt;/span&gt;  &lt;span class="nb"&gt;sec&lt;/span&gt;  &lt;span class="mf"&gt;1.09&lt;/span&gt; &lt;span class="n"&gt;GBytes&lt;/span&gt;   &lt;span class="mi"&gt;938&lt;/span&gt; &lt;span class="n"&gt;Mbits&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sec&lt;/span&gt;                  &lt;span class="n"&gt;receiver&lt;/span&gt;

&lt;span class="n"&gt;iperf&lt;/span&gt; &lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;まずは、リンクアグリゲーション設定前の帯域を計測してみます。
1GbpsのLANを構築しているので、大体そのぐらいの結果が出ていることをわかります。&lt;/p&gt;
&lt;h3&gt;クライアント2台で計測&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# iperf3 -c 192.168.1.2 -p 18081
...
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth       Retr
[  4]   0.00-10.00  sec   629 MBytes   528 Mbits/sec  2036             sender
[  4]   0.00-10.00  sec   629 MBytes   527 Mbits/sec                  receiver

iperf Done.
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% iperf3 -c 192.168.1.2 -p 18080&lt;/span&gt;
&lt;span class="c"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;           &lt;span class="n"&gt;Transfer&lt;/span&gt;     &lt;span class="n"&gt;Bitrate&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.00&lt;/span&gt;  &lt;span class="nb"&gt;sec&lt;/span&gt;   &lt;span class="mi"&gt;538&lt;/span&gt; &lt;span class="n"&gt;MBytes&lt;/span&gt;   &lt;span class="mi"&gt;451&lt;/span&gt; &lt;span class="n"&gt;Mbits&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sec&lt;/span&gt;                  &lt;span class="n"&gt;sender&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.00&lt;/span&gt;  &lt;span class="nb"&gt;sec&lt;/span&gt;   &lt;span class="mi"&gt;538&lt;/span&gt; &lt;span class="n"&gt;MBytes&lt;/span&gt;   &lt;span class="mi"&gt;451&lt;/span&gt; &lt;span class="n"&gt;Mbits&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sec&lt;/span&gt;                  &lt;span class="n"&gt;receiver&lt;/span&gt;

&lt;span class="n"&gt;iperf&lt;/span&gt; &lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;今度は、クライアント2台から同時にパケットを送信して帯域を計測してみます。
1Gbpsある帯域をそれぞれのクライアントで分け合う結果となります。&lt;/p&gt;
&lt;h2&gt;リンクアグリゲーション設定後&lt;/h2&gt;
&lt;h3&gt;クライアント2台で計測&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# iperf3 -c 192.168.1.2 -p 18081
...
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth       Retr
[  4]   0.00-10.00  sec  1.10 GBytes   942 Mbits/sec    0             sender
[  4]   0.00-10.00  sec  1.10 GBytes   941 Mbits/sec                  receiver

iperf Done.
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% iperf3 -c 192.168.1.2 -p 18080&lt;/span&gt;
&lt;span class="c"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Interval&lt;/span&gt;           &lt;span class="n"&gt;Transfer&lt;/span&gt;     &lt;span class="n"&gt;Bitrate&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.00&lt;/span&gt;  &lt;span class="nb"&gt;sec&lt;/span&gt;  &lt;span class="mf"&gt;1.10&lt;/span&gt; &lt;span class="n"&gt;GBytes&lt;/span&gt;   &lt;span class="mi"&gt;942&lt;/span&gt; &lt;span class="n"&gt;Mbits&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sec&lt;/span&gt;                  &lt;span class="n"&gt;sender&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.00&lt;/span&gt;  &lt;span class="nb"&gt;sec&lt;/span&gt;  &lt;span class="mf"&gt;1.10&lt;/span&gt; &lt;span class="n"&gt;GBytes&lt;/span&gt;   &lt;span class="mi"&gt;941&lt;/span&gt; &lt;span class="n"&gt;Mbits&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sec&lt;/span&gt;                  &lt;span class="n"&gt;receiver&lt;/span&gt;

&lt;span class="n"&gt;iperf&lt;/span&gt; &lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;リンクアグリゲーション設定後の計測結果です。
リンクアグリゲーションにより、帯域が2Gbpsに増加しているのが確認できました。&lt;/p&gt;
&lt;p&gt;リンクアグリゲーションのロードバランシングは、デフォルトではMACアドレスによる制御となっていることが多いです。
Catalyst 2960L では、送信先、送信元のMACアドレスでバランシングされるよう設定されています。&lt;/p&gt;
&lt;p&gt;このような設定の場合、クライアントとサーバーが1対1で通信していると、たとえ複数のTCPポートを使用していてもバランシングされず、思ったより帯域が出ないということもあるので気を付ける必要があります。
IPアドレスやポート番号に基づいたロードバランシングを設定することもできるので、ユースケースによって設定を考慮する必要があります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Switch&amp;gt;show etherchannel load-balance
EtherChannel Load-Balancing Configuration:
        src-dst-mac

EtherChannel Load-Balancing Addresses Used Per-Protocol:
Non-IP: Source XOR Destination MAC address
  IPv4: Source XOR Destination MAC address
  IPv6: Source XOR Destination MAC address
&lt;/pre&gt;&lt;/div&gt;</content><category term="サーバー管理"></category></entry><entry><title>自宅SAN(Storage Area Network)の構築</title><link href="https://waura.github.io/zi-zhai-sanstorage-area-networknogou-zhu.html" rel="alternate"></link><published>2018-12-29T21:36:00+09:00</published><updated>2018-12-29T21:36:00+09:00</updated><author><name>waura</name></author><id>tag:waura.github.io,2018-12-29:/zi-zhai-sanstorage-area-networknogou-zhu.html</id><summary type="html">&lt;h1&gt;自宅SANの構築&lt;/h1&gt;
&lt;p&gt;仮想サーバーを立ててライブマイグレーションをさせたい場合や、ディスクを一台のサーバーに集約させたい場合などに、SANを構築すると便利です。
ファイルベースのアクセスとなるNASとは違い、SANはブロックデバイスの形でネットワーク内に共有されます。
そのため、オーバーヘッドが小さいのに加えて、更にファイバーチャネルを使用して高速なネットワークを作成することもできます。&lt;/p&gt;
&lt;p&gt;今回は、自宅にSANを構築したので、その手順をまとめます。&lt;/p&gt;
&lt;h1&gt;構成&lt;/h1&gt;
&lt;p&gt;&lt;a href="./images/HomeSAN.png"&gt;&lt;img alt="HomeSAN" src="../images/HomeSAN.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ストレージを公開する側をターゲット、ストレージを使う側をイニシエータといいます。
ターゲットとイニシエータには、&lt;a href="http://www.fibrechannelworks.com/QLE2560.asp"&gt;QLogicのQLE2560のHBA (Host Bus Adapter)&lt;/a&gt;をPCIeで刺しています。
このボードは型が古いため運が良ければ一枚1,000円程度でヤフオクで取得できます。&lt;/p&gt;
&lt;p&gt;それぞれのHBAはファイバーケーブルで接続します。ケーブルにはシンクルモードとマルチモードの違いがある他、コネクタ形状には、SCとLCという違いがあります。
HBAに刺さっているSFPトランシーバーが対応しているものを使用する必要があります。&lt;/p&gt;
&lt;p&gt;私の場合は、LC - マルチモードのケーブルを使用しています。&lt;/p&gt;
&lt;p&gt;ターゲットとイニシエータには、Ubuntu 17.10をインストールしてあります。&lt;/p&gt;
&lt;h1&gt;ターゲット側のセットアップ&lt;/h1&gt;
&lt;h2&gt;ターゲットモードを有効にする&lt;/h2&gt;
&lt;p&gt;QLE2560のボードを接続すると、自動でqla2xxxドライバーが読み込まれるはずです。
qla2xxxはデフォルトでイニシィエータモードで動作するので、ターゲット側ではターゲットモードで動作するように設定を変更します。
qla2xxx向けの設定ファイルを新規で作成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;自宅SANの構築&lt;/h1&gt;
&lt;p&gt;仮想サーバーを立ててライブマイグレーションをさせたい場合や、ディスクを一台のサーバーに集約させたい場合などに、SANを構築すると便利です。
ファイルベースのアクセスとなるNASとは違い、SANはブロックデバイスの形でネットワーク内に共有されます。
そのため、オーバーヘッドが小さいのに加えて、更にファイバーチャネルを使用して高速なネットワークを作成することもできます。&lt;/p&gt;
&lt;p&gt;今回は、自宅にSANを構築したので、その手順をまとめます。&lt;/p&gt;
&lt;h1&gt;構成&lt;/h1&gt;
&lt;p&gt;&lt;a href="./images/HomeSAN.png"&gt;&lt;img alt="HomeSAN" src="../images/HomeSAN.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ストレージを公開する側をターゲット、ストレージを使う側をイニシエータといいます。
ターゲットとイニシエータには、&lt;a href="http://www.fibrechannelworks.com/QLE2560.asp"&gt;QLogicのQLE2560のHBA (Host Bus Adapter)&lt;/a&gt;をPCIeで刺しています。
このボードは型が古いため運が良ければ一枚1,000円程度でヤフオクで取得できます。&lt;/p&gt;
&lt;p&gt;それぞれのHBAはファイバーケーブルで接続します。ケーブルにはシンクルモードとマルチモードの違いがある他、コネクタ形状には、SCとLCという違いがあります。
HBAに刺さっているSFPトランシーバーが対応しているものを使用する必要があります。&lt;/p&gt;
&lt;p&gt;私の場合は、LC - マルチモードのケーブルを使用しています。&lt;/p&gt;
&lt;p&gt;ターゲットとイニシエータには、Ubuntu 17.10をインストールしてあります。&lt;/p&gt;
&lt;h1&gt;ターゲット側のセットアップ&lt;/h1&gt;
&lt;h2&gt;ターゲットモードを有効にする&lt;/h2&gt;
&lt;p&gt;QLE2560のボードを接続すると、自動でqla2xxxドライバーが読み込まれるはずです。
qla2xxxはデフォルトでイニシィエータモードで動作するので、ターゲット側ではターゲットモードで動作するように設定を変更します。
qla2xxx向けの設定ファイルを新規で作成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vi /etc/modprobe.d/qla2xxx.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;記述する内容は下記のとおりです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;options qla2xxx qlini_mode=&amp;quot;disabled&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;initramfsの更新&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo update-initramfs -u
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;LVMの作成&lt;/h2&gt;
&lt;p&gt;パーティションの拡張・縮小やディスク追加・交換を容易に行うためにLVM(Logical Volume Manager)を使って論理ボリュームを作成して、これを公開する構成にします。&lt;/p&gt;
&lt;h3&gt;パーティションの作成&lt;/h3&gt;
&lt;p&gt;fdiskでディスク1つの全領域をPrimaryパーティションを1つ作りました。
TypeはLinux LVMにしてあります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo fdisk -l /dev/sdd
Disk /dev/sdd: &lt;span class="m"&gt;223&lt;/span&gt;.6 GiB, &lt;span class="m"&gt;240057409536&lt;/span&gt; bytes, &lt;span class="m"&gt;468862128&lt;/span&gt; sectors
Units: sectors of &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Sector size &lt;span class="o"&gt;(&lt;/span&gt;logical/physical&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
I/O size &lt;span class="o"&gt;(&lt;/span&gt;minimum/optimal&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
Disklabel type: dos
Disk identifier: 0x3b9d0378

Device     Boot Start       End   Sectors   Size Id Type
/dev/sdd1        &lt;span class="m"&gt;2048&lt;/span&gt; &lt;span class="m"&gt;468862127&lt;/span&gt; &lt;span class="m"&gt;468860080&lt;/span&gt; &lt;span class="m"&gt;223&lt;/span&gt;.6G 8e Linux LVM
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;PV(物理ボリューム)の作成&lt;/h3&gt;
&lt;p&gt;作成したパーティションでPVを作成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pvcreate /dev/sdd1
  Physical volume &lt;span class="s2"&gt;&amp;quot;/dev/sdd1&amp;quot;&lt;/span&gt; successfully created.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;VG(ボリュームグループ)の作成&lt;/h3&gt;
&lt;p&gt;新規でVGを作成します。
VGの名前はsata3_ssd_vgにしてあります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vgcreate sata3_ssd_vg /dev/sdd1
  Volume group &lt;span class="s2"&gt;&amp;quot;sata3_ssd_vg&amp;quot;&lt;/span&gt; successfully created
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;LV(論理ボリューム)の作成&lt;/h3&gt;
&lt;p&gt;作成したVGからLVを切り出します。
名前はfcで切り出すサイズはとりあえず200Gにしました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo lvcreate -L 200G -n &lt;span class="nb"&gt;fc&lt;/span&gt;  sata3_ssd_vg
  Logical volume &lt;span class="s2"&gt;&amp;quot;fc&amp;quot;&lt;/span&gt; created.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ここまでの手順で"/dev/mapper/sata3_ssd_vg-fc"が作られていると思います。&lt;/p&gt;
&lt;h2&gt;LIOの設定&lt;/h2&gt;
&lt;h3&gt;targetcliのインストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install targetcli-fb
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;backstoreの登録&lt;/h3&gt;
&lt;p&gt;LIOには、公開する論理・物理ストレージを管理しており、管理しているストレージをbackstoresと呼んでいます。
このbackstoresに先程作成したLVMのボリュームを登録します。&lt;/p&gt;
&lt;p&gt;登録は下記のコマンドで行います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo targetcli /backstores/block create &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;fc&lt;/span&gt; &lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/mapper/sata3_ssd_vg-fc
Created block storage object &lt;span class="nb"&gt;fc&lt;/span&gt; using /dev/mapper/sata3_ssd_vg-fc.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下記のコマンドで管理されているbackstoresを見るとblockの下にfcが登録されているのがわかります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;targetcli&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;backstores&lt;/span&gt;
&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;backstores&lt;/span&gt; &lt;span class="p"&gt;..............................................................................&lt;/span&gt; &lt;span class="p"&gt;[...]&lt;/span&gt;
  &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="p"&gt;..................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Storage&lt;/span&gt; &lt;span class="nl"&gt;Objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;fc&lt;/span&gt; &lt;span class="p"&gt;........................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sata3_ssd_vg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;200.0&lt;/span&gt;&lt;span class="n"&gt;GiB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;thru&lt;/span&gt; &lt;span class="n"&gt;deactivated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;fileio&lt;/span&gt; &lt;span class="p"&gt;.................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Storage&lt;/span&gt; &lt;span class="nl"&gt;Objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pscsi&lt;/span&gt; &lt;span class="p"&gt;..................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Storage&lt;/span&gt; &lt;span class="nl"&gt;Objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ramdisk&lt;/span&gt; &lt;span class="p"&gt;................................................................&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Storage&lt;/span&gt; &lt;span class="nl"&gt;Objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;LIOがサポートしているストレージデバイスの形式はblock、fileio、pscsi、ramdiskの4つです。
blockはブロックデバイスを
fileioは、マウントされたファイルシステム内のファイルを登録するときに使用します。ファイルシステムによる性能劣化があるのでテスト目的でのみ使用が奨励されています。
pscsiは、SCSIコマンドをそのままデバイスに流すときに使用します。エミュレーションを使用していないのでSCSIデバイスのパフォーマンスを最大限に出せます。
ramdiskは、SCSIエミュレーションを行うRAMディスクを使用する際に使用します。&lt;/p&gt;
&lt;h3&gt;Fibre Channel Targetの設定&lt;/h3&gt;
&lt;h4&gt;Fibre Channel Targetの作成&lt;/h4&gt;
&lt;p&gt;HBAのWWNを調べる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo targetcli /qla2xxx info
Fabric module name: qla2xxx
ConfigFS path: /sys/kernel/config/target/qla2xxx
Allowed WWN types: naa
Allowed WWNs list: naa.21000024ff0634a8
Fabric module features: acls
Corresponding kernel module: tcm_qla2xxx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;調べたWWNでFibre Channelターゲットを作成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo targetcli /qla2xxx create naa.21000024ff0634a8
Created target naa.21000024ff0634a8.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;WWNの名前でターゲットができているのを確認します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo targetcli /qla2xxx ls
o- qla2xxx .......................................................................... &lt;span class="o"&gt;[&lt;/span&gt;Targets: &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  o- naa.21000024ff0634a8 ............................................................. &lt;span class="o"&gt;[&lt;/span&gt;gen-acls&lt;span class="o"&gt;]&lt;/span&gt;
    o- acls ............................................................................ &lt;span class="o"&gt;[&lt;/span&gt;ACLs: &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    o- luns ............................................................................ &lt;span class="o"&gt;[&lt;/span&gt;LUNs: &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;lunsは公開しているストレージ、aclsは公開を許可している相手のWWNを表しています。
まだ、何も登録されていないので登録していきます。&lt;/p&gt;
&lt;h4&gt;LUNの登録&lt;/h4&gt;
&lt;p&gt;登録済みのbackstoreをlunsに追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo targetcli /qla2xxx/naa.21000024ff0634a8/luns create /backstores/block/fc
Created LUN &lt;span class="m"&gt;0&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;イニシエータへのアクセス許可&lt;/h4&gt;
&lt;p&gt;aclsに通信先になるイニシエータのWWN(World Wide Name)を登録します。
このWWNは、EthernetのMACアドレスのようなものでHBAのポート1つに対し1つ割り当てられています。
このFibre ChannelではこのWWNを使用して通信相手を識別します。
イニシエータになるマシン上で同様にtargetcliを使用してWWNを調べて、aclsに追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo targetcli /qla2xxx/naa.21000024ff0634a8/acls create 21000024ff063657
Created Node ACL &lt;span class="k"&gt;for&lt;/span&gt; naa.21000024ff063657
Created mapped LUN &lt;span class="m"&gt;0&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;設定の保存&lt;/h4&gt;
&lt;p&gt;再起動後も設定を有効にさせるために下記コマンドで保存します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo targetcli / saveconfig
Last &lt;span class="m"&gt;10&lt;/span&gt; configs saved in /etc/rtslib-fb-target/backup.
Configuration saved to /etc/rtslib-fb-target/saveconfig.json
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;イニシエータ側のセットアップ&lt;/h1&gt;
&lt;h2&gt;ターゲット側で公開されているLUNを再スキャン&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# echo 1 &amp;gt; /sys/class/fc_host/host9/issue_lip
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[    3.138509] scsi 9:0:0:0: Direct-Access     LIO-ORG  fc               4.0  PQ: 0 ANSI: 5
[    3.180932] sd 9:0:0:0: Attached scsi generic sg0 type 0
[    3.181678] sd 9:0:0:0: [sda] 419430400 512-byte logical blocks: (215 GB/200 GiB)
[    3.181789] sd 9:0:0:0: [sda] Write Protect is off
[    3.181790] sd 9:0:0:0: [sda] Mode Sense: 43 00 10 08
[    3.181943] sd 9:0:0:0: [sda] Write cache: enabled, read cache: enabled, supports DPO and FUA
[    3.184574] sd 9:0:0:0: [sda] Attached SCSI disk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;/dev/sda としてターゲット側で公開しているストレージが見えています。&lt;/p&gt;
&lt;h2&gt;フォーマット&lt;/h2&gt;
&lt;p&gt;通常のディスクと同様にフォーマットして使用します。
今回はext4でフォーマットします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkfs.ext4 /dev/sda
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;フォーマット後は、マウントして使用することができます。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;p&gt;http://linux-iscsi.org/wiki/Fibre_Channel
http://www.linux-iscsi.org/Doc/LIO%20Admin%20Manual.pdf&lt;/p&gt;</content><category term="サーバー管理"></category></entry><entry><title>CentOS7で固定IPアドレスの設定を行う</title><link href="https://waura.github.io/centos7degu-ding-ipadoresunoshe-ding-woxing-u.html" rel="alternate"></link><published>2018-08-18T12:51:00+09:00</published><updated>2018-08-18T12:51:00+09:00</updated><author><name>waura</name></author><id>tag:waura.github.io,2018-08-18:/centos7degu-ding-ipadoresunoshe-ding-woxing-u.html</id><summary type="html">&lt;h1&gt;固定IPアドレス設定&lt;/h1&gt;
&lt;p&gt;CentOS 7.5.1804 での固定IPアドレスを設定するコマンドです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# nmcli connection modify eth0 ipv4.addresses [割り当てたいIPアドレス] ipv4.gateway [GatewayのIPアドレス] ipv4.dns [参照するDNSサーバのIPアドレス] ipv4.method manual connection.autoconnect yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2番目と3番目のオプションは、それぞれ短縮可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;connection -&amp;gt; c&lt;/li&gt;
&lt;li&gt;modify -&amp;gt; m&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ipv4.methodにmanualを設定しているのは、DHCPではなく固定でIPアドレスを割り当てるためです。
connection.autoconnect yesで起動時にNICが立ち上がるように設定しています。&lt;/p&gt;
&lt;h3&gt;実行例&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# nmcli connection modify eth0 ipv4.addresses 192.168.1 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;固定IPアドレス設定&lt;/h1&gt;
&lt;p&gt;CentOS 7.5.1804 での固定IPアドレスを設定するコマンドです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# nmcli connection modify eth0 ipv4.addresses [割り当てたいIPアドレス] ipv4.gateway [GatewayのIPアドレス] ipv4.dns [参照するDNSサーバのIPアドレス] ipv4.method manual connection.autoconnect yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2番目と3番目のオプションは、それぞれ短縮可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;connection -&amp;gt; c&lt;/li&gt;
&lt;li&gt;modify -&amp;gt; m&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ipv4.methodにmanualを設定しているのは、DHCPではなく固定でIPアドレスを割り当てるためです。
connection.autoconnect yesで起動時にNICが立ち上がるように設定しています。&lt;/p&gt;
&lt;h3&gt;実行例&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# nmcli connection modify eth0 ipv4.addresses 192.168.1.65/24 ipv4.gateway 192.168.1.1 ipv4.dns 192.168.1.1 ipv4.method manual connection.autoconnect yes
&lt;/pre&gt;&lt;/div&gt;</content><category term="サーバー管理"></category></entry><entry><title>2008年と2015年に組んだ省電力サーバーのベンチマーク比較</title><link href="https://waura.github.io/atom330_vs_athlon5350_benchmark.html" rel="alternate"></link><published>2015-05-25T20:44:00+09:00</published><updated>2015-05-25T20:44:00+09:00</updated><author><name>waura</name></author><id>tag:waura.github.io,2015-05-25:/atom330_vs_athlon5350_benchmark.html</id><summary type="html">&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;サーバーを新しく組んだので、ベンチマークの比較をしてみます。&lt;br&gt;
比較対象サーバーの構成の比較は下記のとおりです。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;th align="left"&gt;2008年&lt;/th&gt;
&lt;th align="left"&gt;2015年&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;CPU&lt;/td&gt;
&lt;td align="left"&gt;Intel Atom330&lt;/td&gt;
&lt;td align="left"&gt;AMD Athlon5350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;メモリ&lt;/td&gt;
&lt;td align="left"&gt;DDR2-800 2GB&lt;/td&gt;
&lt;td align="left"&gt;DDR3-1600 16GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ベンチマークソフトは&lt;a href="https://code.google.com/p/byte-unixbench/"&gt;unixbench&lt;/a&gt;を使用します。&lt;/p&gt;
&lt;h2&gt;Atom330とAthlon5350のスペック比較&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;&lt;/th&gt;
&lt;th align="right"&gt;Atom330&lt;/th&gt;
&lt;th align="right"&gt;Athlon5350&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;周波数&lt;/td&gt;
&lt;td align="right"&gt;1.6GHz&lt;/td&gt;
&lt;td align="right"&gt;2.05GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;L1 cache&lt;/td&gt;
&lt;td align="right"&gt;64 KB (code) / 48 KB (data)&lt;/td&gt;
&lt;td align="right"&gt;128 KB (code) / 128 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;(data)&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;L2 cache&lt;/td&gt;
&lt;td align="right"&gt;1024KB&lt;/td&gt;
&lt;td align="right"&gt;2048KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;TDP&lt;/td&gt;
&lt;td align="right"&gt;8W&lt;/td&gt;
&lt;td align="right"&gt;25W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;実Core数&lt;/td&gt;
&lt;td align="right"&gt;2 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;サーバーを新しく組んだので、ベンチマークの比較をしてみます。&lt;br&gt;
比較対象サーバーの構成の比較は下記のとおりです。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;th align="left"&gt;2008年&lt;/th&gt;
&lt;th align="left"&gt;2015年&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;CPU&lt;/td&gt;
&lt;td align="left"&gt;Intel Atom330&lt;/td&gt;
&lt;td align="left"&gt;AMD Athlon5350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;メモリ&lt;/td&gt;
&lt;td align="left"&gt;DDR2-800 2GB&lt;/td&gt;
&lt;td align="left"&gt;DDR3-1600 16GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ベンチマークソフトは&lt;a href="https://code.google.com/p/byte-unixbench/"&gt;unixbench&lt;/a&gt;を使用します。&lt;/p&gt;
&lt;h2&gt;Atom330とAthlon5350のスペック比較&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;&lt;/th&gt;
&lt;th align="right"&gt;Atom330&lt;/th&gt;
&lt;th align="right"&gt;Athlon5350&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;周波数&lt;/td&gt;
&lt;td align="right"&gt;1.6GHz&lt;/td&gt;
&lt;td align="right"&gt;2.05GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;L1 cache&lt;/td&gt;
&lt;td align="right"&gt;64 KB (code) / 48 KB (data)&lt;/td&gt;
&lt;td align="right"&gt;128 KB (code) / 128 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;(data)&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;L2 cache&lt;/td&gt;
&lt;td align="right"&gt;1024KB&lt;/td&gt;
&lt;td align="right"&gt;2048KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;TDP&lt;/td&gt;
&lt;td align="right"&gt;8W&lt;/td&gt;
&lt;td align="right"&gt;25W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;実Core数&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Atom330とAthlon 5350のベンチマーク比較&lt;/h2&gt;
&lt;p&gt;Atom330とAthlon5350のベンチマークの比較結果です。&lt;/p&gt;
&lt;p&gt;4 parallel processの結果を比較しています。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Test&lt;/th&gt;
&lt;th align="right"&gt;2007年(Atom330)&lt;/th&gt;
&lt;th align="right"&gt;2015年(Athlon5350)&lt;/th&gt;
&lt;th align="right"&gt;伸び率(2015年のスコア/ 2008年のスコア)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Dhrystone 2 using register variables&lt;/td&gt;
&lt;td align="right"&gt;1362.9&lt;/td&gt;
&lt;td align="right"&gt;4958.9&lt;/td&gt;
&lt;td align="right"&gt;3.64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Double-Precision Whetstone&lt;/td&gt;
&lt;td align="right"&gt;571.8&lt;/td&gt;
&lt;td align="right"&gt;1846.4&lt;/td&gt;
&lt;td align="right"&gt;3.23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Execl Throughput&lt;/td&gt;
&lt;td align="right"&gt;377.4&lt;/td&gt;
&lt;td align="right"&gt;2081.6&lt;/td&gt;
&lt;td align="right"&gt;5.52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 1024 bufsize 2000 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;305.4&lt;/td&gt;
&lt;td align="right"&gt;1832.6&lt;/td&gt;
&lt;td align="right"&gt;6.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 256 bufsize 500 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;196.0&lt;/td&gt;
&lt;td align="right"&gt;1384.9&lt;/td&gt;
&lt;td align="right"&gt;7.07&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 4096 bufsize 8000 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;573.1&lt;/td&gt;
&lt;td align="right"&gt;3170.0&lt;/td&gt;
&lt;td align="right"&gt;5.53&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Pipe Throughput&lt;/td&gt;
&lt;td align="right"&gt;434.5&lt;/td&gt;
&lt;td align="right"&gt;1910.3&lt;/td&gt;
&lt;td align="right"&gt;4.40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Pipe-based Context Switching&lt;/td&gt;
&lt;td align="right"&gt;224.1&lt;/td&gt;
&lt;td align="right"&gt;918.6&lt;/td&gt;
&lt;td align="right"&gt;4.10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Process Creation&lt;/td&gt;
&lt;td align="right"&gt;361.8&lt;/td&gt;
&lt;td align="right"&gt;1986.7&lt;/td&gt;
&lt;td align="right"&gt;5.49&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Shell Scripts (1 concurrent)&lt;/td&gt;
&lt;td align="right"&gt;760.3&lt;/td&gt;
&lt;td align="right"&gt;1785.4&lt;/td&gt;
&lt;td align="right"&gt;2.35&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Shell Scripts (8 concurrent)&lt;/td&gt;
&lt;td align="right"&gt;700.2&lt;/td&gt;
&lt;td align="right"&gt;2088.1&lt;/td&gt;
&lt;td align="right"&gt;2.98&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;System Call Overhead&lt;/td&gt;
&lt;td align="right"&gt;1052.5&lt;/td&gt;
&lt;td align="right"&gt;2531.4&lt;/td&gt;
&lt;td align="right"&gt;2.41&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;System Benchmarks Index Score:&lt;/td&gt;
&lt;td align="right"&gt;491.6&lt;/td&gt;
&lt;td align="right"&gt;2035.0&lt;/td&gt;
&lt;td align="right"&gt;4.14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;すべての項目でスコアが伸びてます。&lt;/p&gt;
&lt;p&gt;特にFile Copyの伸びが大きいです。&lt;/p&gt;
&lt;p&gt;File Copy
1024...のテスト内容は、2MByteのファイルを1024Byteごとに処理します。&lt;/p&gt;
&lt;p&gt;File Copy 256...は、500KByteのファイルを256Byteごと、File
Copy4096...は、8MByteのファイルを4096Byteごとに処理します。&lt;/p&gt;
&lt;p&gt;スコアの伸びが大きいのは、下記の要因が大きそうです。&lt;/p&gt;
&lt;p&gt;・Atom330が物理コア2個に対して、Athlon5350が4個&lt;/p&gt;
&lt;p&gt;・Atom330の動作クロック1.6GHzに対して、Athlon5350が2.05GHz&lt;/p&gt;
&lt;p&gt;2008年と2015年に組んだときにかかったお金はほぼ同額です。&lt;/p&gt;
&lt;p&gt;Atom330のボードとAthlon5350+マザーボードはどちらも1万円程度で購入しました。&lt;/p&gt;
&lt;p&gt;7年も経つと同じ金額でもここまで全体的にスペックが底上げされたサーバーが組めるようになるようです。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;h3&gt;Atom330&lt;/h3&gt;
&lt;h4&gt;1 parallel process&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Test&lt;/th&gt;
&lt;th align="right"&gt;Score&lt;/th&gt;
&lt;th align="left"&gt;Unit&lt;/th&gt;
&lt;th align="right"&gt;Time&lt;/th&gt;
&lt;th align="right"&gt;Iters.&lt;/th&gt;
&lt;th align="right"&gt;Baseline&lt;/th&gt;
&lt;th align="right"&gt;Index&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Dhrystone 2 using register variables&lt;/td&gt;
&lt;td align="right"&gt;5881155.3&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;116700.0&lt;/td&gt;
&lt;td align="right"&gt;504.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Double-Precision Whetstone&lt;/td&gt;
&lt;td align="right"&gt;872.9&lt;/td&gt;
&lt;td align="left"&gt;MWIPS&lt;/td&gt;
&lt;td align="right"&gt;9.8 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;55.0&lt;/td&gt;
&lt;td align="right"&gt;158.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Execl Throughput&lt;/td&gt;
&lt;td align="right"&gt;657.2&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;29.6 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;43.0&lt;/td&gt;
&lt;td align="right"&gt;152.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 1024 bufsize 2000 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;118195.2&lt;/td&gt;
&lt;td align="left"&gt;KBps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;3960.0&lt;/td&gt;
&lt;td align="right"&gt;298.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 256 bufsize 500 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;33060.5&lt;/td&gt;
&lt;td align="left"&gt;KBps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;1655.0&lt;/td&gt;
&lt;td align="right"&gt;199.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 4096 bufsize 8000 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;317990.6&lt;/td&gt;
&lt;td align="left"&gt;KBps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;5800.0&lt;/td&gt;
&lt;td align="right"&gt;548.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Pipe Throughput&lt;/td&gt;
&lt;td align="right"&gt;404343.1&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;12440.0&lt;/td&gt;
&lt;td align="right"&gt;325.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Pipe-based Context Switching&lt;/td&gt;
&lt;td align="right"&gt;21144.8&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;4000.0&lt;/td&gt;
&lt;td align="right"&gt;52.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Process Creation&lt;/td&gt;
&lt;td align="right"&gt;1800.5&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;126.0&lt;/td&gt;
&lt;td align="right"&gt;142.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Shell Scripts (1 concurrent)&lt;/td&gt;
&lt;td align="right"&gt;1743.6&lt;/td&gt;
&lt;td align="left"&gt;lpm&lt;/td&gt;
&lt;td align="right"&gt;60.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;42.4&lt;/td&gt;
&lt;td align="right"&gt;411.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Shell Scripts (8 concurrent)&lt;/td&gt;
&lt;td align="right"&gt;406.3&lt;/td&gt;
&lt;td align="left"&gt;lpm&lt;/td&gt;
&lt;td align="right"&gt;60.1 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;6.0&lt;/td&gt;
&lt;td align="right"&gt;677.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;System Call Overhead&lt;/td&gt;
&lt;td align="right"&gt;897649.1&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;15000.0&lt;/td&gt;
&lt;td align="right"&gt;598.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;System Benchmarks Index Score:&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;271.9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;4 parallel processes&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Test&lt;/th&gt;
&lt;th align="right"&gt;Score&lt;/th&gt;
&lt;th align="left"&gt;Unit&lt;/th&gt;
&lt;th align="right"&gt;Time&lt;/th&gt;
&lt;th align="right"&gt;Iters.&lt;/th&gt;
&lt;th align="right"&gt;Baseline&lt;/th&gt;
&lt;th align="right"&gt;Index&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Dhrystone 2 using register variables&lt;/td&gt;
&lt;td align="right"&gt;15904701.2&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;116700.0&lt;/td&gt;
&lt;td align="right"&gt;1362.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Double-Precision Whetstone&lt;/td&gt;
&lt;td align="right"&gt;3144.8&lt;/td&gt;
&lt;td align="left"&gt;MWIPS&lt;/td&gt;
&lt;td align="right"&gt;9.8 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;55.0&lt;/td&gt;
&lt;td align="right"&gt;571.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Execl Throughput&lt;/td&gt;
&lt;td align="right"&gt;1622.7&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;29.6 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;43.0&lt;/td&gt;
&lt;td align="right"&gt;377.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 1024 bufsize 2000 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;120953.8&lt;/td&gt;
&lt;td align="left"&gt;KBps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;3960.0&lt;/td&gt;
&lt;td align="right"&gt;305.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 256 bufsize 500 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;32443.7&lt;/td&gt;
&lt;td align="left"&gt;KBps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;1655.0&lt;/td&gt;
&lt;td align="right"&gt;196.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 4096 bufsize 8000 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;332388.0&lt;/td&gt;
&lt;td align="left"&gt;KBps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;5800.0&lt;/td&gt;
&lt;td align="right"&gt;573.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Pipe Throughput&lt;/td&gt;
&lt;td align="right"&gt;540570.0&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;12440.0&lt;/td&gt;
&lt;td align="right"&gt;434.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Pipe-based Context Switching&lt;/td&gt;
&lt;td align="right"&gt;89659.6&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;4000.0&lt;/td&gt;
&lt;td align="right"&gt;224.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Process Creation&lt;/td&gt;
&lt;td align="right"&gt;4558.4&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;126.0&lt;/td&gt;
&lt;td align="right"&gt;361.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Shell Scripts (1 concurrent)&lt;/td&gt;
&lt;td align="right"&gt;3223.8&lt;/td&gt;
&lt;td align="left"&gt;lpm&lt;/td&gt;
&lt;td align="right"&gt;60.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;42.4&lt;/td&gt;
&lt;td align="right"&gt;760.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Shell Scripts (8 concurrent)&lt;/td&gt;
&lt;td align="right"&gt;420.1&lt;/td&gt;
&lt;td align="left"&gt;lpm&lt;/td&gt;
&lt;td align="right"&gt;60.4 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;6.0&lt;/td&gt;
&lt;td align="right"&gt;700.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;System Call Overhead&lt;/td&gt;
&lt;td align="right"&gt;1578750.6&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;15000.0&lt;/td&gt;
&lt;td align="right"&gt;1052.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;System Benchmarks Index Score:&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;491.6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Athlon 5350&lt;/h3&gt;
&lt;h4&gt;1 parallel processes&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Test&lt;/th&gt;
&lt;th align="right"&gt;Score&lt;/th&gt;
&lt;th align="left"&gt;Unit&lt;/th&gt;
&lt;th align="right"&gt;Time&lt;/th&gt;
&lt;th align="right"&gt;Iters.&lt;/th&gt;
&lt;th align="right"&gt;Baseline&lt;/th&gt;
&lt;th align="right"&gt;Index&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Dhrystone 2 using register variables&lt;/td&gt;
&lt;td align="right"&gt;14343277.6&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;116700.0&lt;/td&gt;
&lt;td align="right"&gt;1229.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Double-Precision Whetstone&lt;/td&gt;
&lt;td align="right"&gt;2549.9&lt;/td&gt;
&lt;td align="left"&gt;MWIPS&lt;/td&gt;
&lt;td align="right"&gt;9.6 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;55.0&lt;/td&gt;
&lt;td align="right"&gt;463.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Execl Throughput&lt;/td&gt;
&lt;td align="right"&gt;861.3&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;29.9 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;43.0&lt;/td&gt;
&lt;td align="right"&gt;200.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 1024 bufsize 2000 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;347747.1&lt;/td&gt;
&lt;td align="left"&gt;KBps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;3960.0&lt;/td&gt;
&lt;td align="right"&gt;878.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 256 bufsize 500 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;108403.5&lt;/td&gt;
&lt;td align="left"&gt;KBps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;1655.0&lt;/td&gt;
&lt;td align="right"&gt;655.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 4096 bufsize 8000 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;813482.5&lt;/td&gt;
&lt;td align="left"&gt;KBps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;5800.0&lt;/td&gt;
&lt;td align="right"&gt;1402.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Pipe Throughput&lt;/td&gt;
&lt;td align="right"&gt;656602.5&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;12440.0&lt;/td&gt;
&lt;td align="right"&gt;527.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Pipe-based Context Switching&lt;/td&gt;
&lt;td align="right"&gt;26988.5&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;4000.0&lt;/td&gt;
&lt;td align="right"&gt;67.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Process Creation&lt;/td&gt;
&lt;td align="right"&gt;2558.0&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;126.0&lt;/td&gt;
&lt;td align="right"&gt;203.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Shell Scripts (1 concurrent)&lt;/td&gt;
&lt;td align="right"&gt;1233.7&lt;/td&gt;
&lt;td align="left"&gt;lpm&lt;/td&gt;
&lt;td align="right"&gt;60.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;42.4&lt;/td&gt;
&lt;td align="right"&gt;291.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Shell Scripts (8 concurrent)&lt;/td&gt;
&lt;td align="right"&gt;1119.0&lt;/td&gt;
&lt;td align="left"&gt;lpm&lt;/td&gt;
&lt;td align="right"&gt;60.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;6.0&lt;/td&gt;
&lt;td align="right"&gt;1865.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;System Call Overhead&lt;/td&gt;
&lt;td align="right"&gt;1031068.0&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;15000.0&lt;/td&gt;
&lt;td align="right"&gt;687.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;System Benchmarks Index Score:&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;500.7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;4 parallel processes&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Test&lt;/th&gt;
&lt;th align="right"&gt;Score&lt;/th&gt;
&lt;th align="left"&gt;Unit&lt;/th&gt;
&lt;th align="right"&gt;Time&lt;/th&gt;
&lt;th align="right"&gt;Iters.&lt;/th&gt;
&lt;th align="right"&gt;Baseline&lt;/th&gt;
&lt;th align="right"&gt;Index&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Dhrystone 2 using register variables&lt;/td&gt;
&lt;td align="right"&gt;57870650.9&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;116700.0&lt;/td&gt;
&lt;td align="right"&gt;4958.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Double-Precision Whetstone&lt;/td&gt;
&lt;td align="right"&gt;10155.4&lt;/td&gt;
&lt;td align="left"&gt;MWIPS&lt;/td&gt;
&lt;td align="right"&gt;9.6 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;55.0&lt;/td&gt;
&lt;td align="right"&gt;1846.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Execl Throughput&lt;/td&gt;
&lt;td align="right"&gt;8951.1&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;29.9 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;43.0&lt;/td&gt;
&lt;td align="right"&gt;2081.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 1024 bufsize 2000 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;725711.1&lt;/td&gt;
&lt;td align="left"&gt;KBps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;3960.0&lt;/td&gt;
&lt;td align="right"&gt;1832.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 256 bufsize 500 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;229203.3&lt;/td&gt;
&lt;td align="left"&gt;KBps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;1655.0&lt;/td&gt;
&lt;td align="right"&gt;1384.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;File Copy 4096 bufsize 8000 maxblocks&lt;/td&gt;
&lt;td align="right"&gt;1838586.1&lt;/td&gt;
&lt;td align="left"&gt;KBps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;5800.0&lt;/td&gt;
&lt;td align="right"&gt;3170.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Pipe Throughput&lt;/td&gt;
&lt;td align="right"&gt;2376358.0&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;12440.0&lt;/td&gt;
&lt;td align="right"&gt;1910.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Pipe-based Context Switching&lt;/td&gt;
&lt;td align="right"&gt;367444.3&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;4000.0&lt;/td&gt;
&lt;td align="right"&gt;918.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Process Creation&lt;/td&gt;
&lt;td align="right"&gt;25032.3&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;30.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;126.0&lt;/td&gt;
&lt;td align="right"&gt;1986.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Shell Scripts (1 concurrent)&lt;/td&gt;
&lt;td align="right"&gt;7570.2&lt;/td&gt;
&lt;td align="left"&gt;lpm&lt;/td&gt;
&lt;td align="right"&gt;60.0 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;42.4&lt;/td&gt;
&lt;td align="right"&gt;1785.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Shell Scripts (8 concurrent)&lt;/td&gt;
&lt;td align="right"&gt;1252.9&lt;/td&gt;
&lt;td align="left"&gt;lpm&lt;/td&gt;
&lt;td align="right"&gt;60.1 s&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;6.0&lt;/td&gt;
&lt;td align="right"&gt;2088.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;System Call Overhead&lt;/td&gt;
&lt;td align="right"&gt;3797050.7&lt;/td&gt;
&lt;td align="left"&gt;lps&lt;/td&gt;
&lt;td align="right"&gt;10.0 s&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;15000.0&lt;/td&gt;
&lt;td align="right"&gt;2531.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;System Benchmarks Index Score:&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;2035.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="サーバー管理"></category></entry><entry><title>だれでも組める！ 省電力かつ実用的な自宅サーバー 2015年版</title><link href="https://waura.github.io/echo_home_server_2015.html" rel="alternate"></link><published>2015-04-25T19:58:00+09:00</published><updated>2015-04-25T19:58:00+09:00</updated><author><name>waura</name></author><id>tag:waura.github.io,2015-04-25:/echo_home_server_2015.html</id><summary type="html">&lt;h2&gt;なぜ自宅サーバーか？&lt;/h2&gt;
&lt;p&gt;「自宅サーバーではなく、VPSを利用すれば安くサーバーを使えるのでは？」と思われる方も多いかと思います。&lt;br&gt;
たしかに、VPSをレンタルすれば安い費用でサーバーを利用でき、さらに「初期投資が不必要」「サーバーの電気代がかからない」というメリットがあります。&lt;br&gt;
しかし、自分はファイルサーバーにも使用したいのでファイルを手元に置いておける自宅サーバーを使用することにします。&lt;/p&gt;
&lt;h2&gt;どんなサーバーを組むのか？&lt;/h2&gt;
&lt;p&gt;どんなサーバーを組むのかによって、重視するポイントが変わってきます。&lt;br&gt;
自分は下のような用途でサーバーを使用します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Webサーバー&lt;/li&gt;
&lt;li&gt;ビルドサーバー&lt;/li&gt;
&lt;li&gt;ファイルサーバ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ビルドサーバー用途からなるべくCPU性能がいい方がいいし、メモリーも多い方がいい。&lt;br&gt;
また、ファイルサーバにも使うのでディスク容量もたくさん欲しい。自宅にサーバーを置くので電気代はあまりかからない方がいい。&lt;br&gt;
...と、要は性能はなるべく高く、かつ電気代はなるべく安くとないものねだりになってしまいした。&lt;br&gt;
というわけで今回は、通常のデスクトップPCよりは低消費電力かつ、サーバーの用途に支障をきたさない程度のサーバーの構成を考えてみたいと思います。&lt;/p&gt;
&lt;h2&gt;PCパーツの選択&lt;/h2&gt;
&lt;p&gt;サーバーを建てるには、以下のパーツを用意する必要があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;マザーボード&lt;/li&gt;
&lt;li&gt;メモリー&lt;/li&gt;
&lt;li&gt;HDDまたはSSD&lt;/li&gt;
&lt;li&gt;電源&lt;/li&gt;
&lt;li&gt;PCケース&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自分は、電源とPCケースは持ってるもの使用するので、ここではCPU、メモリーとHDD(SSD)を選んで行きます。&lt;/p&gt;
&lt;h3&gt;CPU&lt;/h3&gt;
&lt;p&gt;今現在、デスクトップ向けで低消費電力かつそこそこの性能のCPUは、IntelのCelenron
J1900やPentium …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;なぜ自宅サーバーか？&lt;/h2&gt;
&lt;p&gt;「自宅サーバーではなく、VPSを利用すれば安くサーバーを使えるのでは？」と思われる方も多いかと思います。&lt;br&gt;
たしかに、VPSをレンタルすれば安い費用でサーバーを利用でき、さらに「初期投資が不必要」「サーバーの電気代がかからない」というメリットがあります。&lt;br&gt;
しかし、自分はファイルサーバーにも使用したいのでファイルを手元に置いておける自宅サーバーを使用することにします。&lt;/p&gt;
&lt;h2&gt;どんなサーバーを組むのか？&lt;/h2&gt;
&lt;p&gt;どんなサーバーを組むのかによって、重視するポイントが変わってきます。&lt;br&gt;
自分は下のような用途でサーバーを使用します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Webサーバー&lt;/li&gt;
&lt;li&gt;ビルドサーバー&lt;/li&gt;
&lt;li&gt;ファイルサーバ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ビルドサーバー用途からなるべくCPU性能がいい方がいいし、メモリーも多い方がいい。&lt;br&gt;
また、ファイルサーバにも使うのでディスク容量もたくさん欲しい。自宅にサーバーを置くので電気代はあまりかからない方がいい。&lt;br&gt;
...と、要は性能はなるべく高く、かつ電気代はなるべく安くとないものねだりになってしまいした。&lt;br&gt;
というわけで今回は、通常のデスクトップPCよりは低消費電力かつ、サーバーの用途に支障をきたさない程度のサーバーの構成を考えてみたいと思います。&lt;/p&gt;
&lt;h2&gt;PCパーツの選択&lt;/h2&gt;
&lt;p&gt;サーバーを建てるには、以下のパーツを用意する必要があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;マザーボード&lt;/li&gt;
&lt;li&gt;メモリー&lt;/li&gt;
&lt;li&gt;HDDまたはSSD&lt;/li&gt;
&lt;li&gt;電源&lt;/li&gt;
&lt;li&gt;PCケース&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自分は、電源とPCケースは持ってるもの使用するので、ここではCPU、メモリーとHDD(SSD)を選んで行きます。&lt;/p&gt;
&lt;h3&gt;CPU&lt;/h3&gt;
&lt;p&gt;今現在、デスクトップ向けで低消費電力かつそこそこの性能のCPUは、IntelのCelenron
J1900やPentium J2900等のBay
Trail-Dか、AMDのKabiniアーキテクチャをデスクトップ向けにしたAthlon5350やAthlon5310があります。&lt;br&gt;
できるだけ高性能なCPUを選びたいので、今回は最上位モデルのIntelのPentium
J2900とAMDのAthlon 5350を候補として比較しました。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;th align="left"&gt;Athlon5350&lt;/th&gt;
&lt;th align="left"&gt;Pentium J2900&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;周波数&lt;/td&gt;
&lt;td align="left"&gt;2.05GHz&lt;/td&gt;
&lt;td align="left"&gt;2.41GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;コア数/スレッド数&lt;/td&gt;
&lt;td align="left"&gt;4コア/4スレッド&lt;/td&gt;
&lt;td align="left"&gt;4コア/4スレッド&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;L2キャッシュ&lt;/td&gt;
&lt;td align="left"&gt;2MB&lt;/td&gt;
&lt;td align="left"&gt;2MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;内蔵GPU&lt;/td&gt;
&lt;td align="left"&gt;Radeon R3 Graphics HD 8400&lt;/td&gt;
&lt;td align="left"&gt;Intel HD Graphics&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;対応メモリ&lt;/td&gt;
&lt;td align="left"&gt;DDR3-1600 シングルチャンネル&lt;/td&gt;
&lt;td align="left"&gt;DDR3-1333&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;デュアルチャンネル&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;TDP&lt;/td&gt;
&lt;td align="left"&gt;25W&lt;/td&gt;
&lt;td align="left"&gt;10W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;おおよその価格※&lt;/td&gt;
&lt;td align="left"&gt;10,000〜&lt;/td&gt;
&lt;td align="left"&gt;13,500〜&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;※Pentium
J2900はベアボーンで売られているので、価格の比較はマザーボード込みです。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cpu-monkey.com/en/compare_cpu-amd_athlon_5350-381-vs-intel_pentium_j2900-326"&gt;ベンチマーク結果&lt;/a&gt;を見たところ、すべてのベンチマークでCPU性能はAthlon
5350が上回っているようでした。&lt;/p&gt;
&lt;p&gt;しかし、PassMark CPU以外のベンチマークは差は小さいようです。&lt;/p&gt;
&lt;p&gt;例えば、Geekbench 3, 64bit (Multi-Core)でAthlon
5350が「3640」に対してPentium J2900が「3537」など。&lt;br&gt;
PassMark CPUはAthlon 5350が「2640」に対してPentium J2900が「1931」。&lt;/p&gt;
&lt;p&gt;内蔵GPUに関してのスコアもAthlon
5350が上回っているようです。(サーバー用途の場合は重要ではありませんが...)&lt;/p&gt;
&lt;p&gt;Athlon5350の方が動作クロックの高いメモリに対応していますが、デュアルチャンネルに非対応です。&lt;br&gt;
対して、Pentium
J2900は対応しているメモリの動作クロックは低いですが、デュアルチャンネルに対応しています。&lt;br&gt;
なので対応メモリに関しては、一長一短と判断しました。&lt;/p&gt;
&lt;p&gt;消費電力に関しては、Athlon 5350のほうが10W高くなっています。&lt;/p&gt;
&lt;p&gt;以上から、性能を取るならAthlon 5350、より低消費電力を取るならPentium
J2900となりそうです。&lt;br&gt;
自分は下記の理由からAthlon 5350を選びました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TDPの10W差を電気代にすると月に200円ぐらいの差にしかならない(アイドルの時間のほうが多いはずなので実際にはもっと小さくなるはず)&lt;/li&gt;
&lt;li&gt;Athlon 5350の方がPentium
    J2900より安いので、電気代が多くかかっても1、2年はAthlon5350の方がトータルでは安い&lt;/li&gt;
&lt;li&gt;Athlon 5350の方がマザーボードの種類が多い&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;マザーボード&lt;/h3&gt;
&lt;p&gt;CPUが決まったら、次はマザーボードを選びます。&lt;br&gt;
Athlon
5350のソケットはAM1なので、このソケットのマザーボードの中から選びます。&lt;br&gt;
また、ファイルサーバの用途にも使う関係からHDD(SSD)が多く接続できるSATAポートの多いものを選びました。&lt;/p&gt;
&lt;p&gt;SATAポートが多いボードには、ASRockのAM1B-ITXとAM1H-ITXがあります。&lt;/p&gt;
&lt;p&gt;これらのボードにはSATAポートが4個ついています。&lt;br&gt;
Athlon
5350はチップセットがCPU側にあり、そのチップセットがSATA2ポートにしか対応していません。&lt;br&gt;
しかし、このASRockのマザーボードは、マザーボード側でSATAのポートを増やすためにコントローラーを追加しているようです。&lt;br&gt;
さすがASRock、変わったマザーボードが多いです。&lt;/p&gt;
&lt;p&gt;このAM1B-ITXとAM1H-ITXですが、ほぼ同じボードです。&lt;br&gt;
違いは、AM1H-ITXはACアダプターに対応しているという点です。&lt;br&gt;
自分は、ACアダプターを持っておらず、新規に購入するとそこその出費になりそうだったので、AM1B-ITXの方を選びました。&lt;/p&gt;
&lt;h3&gt;メモリー&lt;/h3&gt;
&lt;p&gt;マザーボードが決まったので、次はメモリーです。&lt;br&gt;
メモリーは使える規格の一番いいものをなるべくたくさん積む方針で行こうと思います。&lt;br&gt;
メモリーが足りない状況になると、HDDへのアクセスが起きてサーバーの動きが極端に悪くなります。&lt;br&gt;
ビルドサーバーに使ったり、データベースを使ったりすることを考えると積めるだけ積んで置くことに越したことはないと思います。&lt;/p&gt;
&lt;p&gt;Athlon 5350の対応メモリのはDDR3-1600です。&lt;br&gt;
DDR3-1600のメモリでは、8GBのメモリが1GBあたりの価格が安いようです。&lt;br&gt;
マザーボードにはメモリのスロットが2つあるので、8GB x 2本 =
16GB積むことにしました。&lt;br&gt;
メーカーはノーブランドです。&lt;/p&gt;
&lt;p&gt;Memtest等でエラーが出たときに交換をしたいという人は、交換に対応した店でメモリーを買うと良いと思います。&lt;/p&gt;
&lt;h3&gt;HDDまたはSSD&lt;/h3&gt;
&lt;p&gt;マーザーボードAM1B-ITXには、4つのSATAポートがあるので最大4つHDD(SSD)が接続できます。&lt;br&gt;
HDDは、古いサーバーのものがあるのでそれをこちらに接続します。&lt;/p&gt;
&lt;p&gt;OSをUbuntu
ServerからCentOSに入れ替えようと思うので、OSを入れる用のHDDだけ買いました。&lt;br&gt;
データをなるべく入れられるように3TBのHDDを選択しました。&lt;/p&gt;
&lt;h2&gt;構成&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;th align="left"&gt;選択パーツ&lt;/th&gt;
&lt;th align="right"&gt;価格&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;CPU&lt;/td&gt;
&lt;td align="left"&gt;Athlon 5350&lt;/td&gt;
&lt;td align="right"&gt;6,350円&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;マザーボード&lt;/td&gt;
&lt;td align="left"&gt;ASRock AM1B-ITX&lt;/td&gt;
&lt;td align="right"&gt;3,627円&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;メモリ&lt;/td&gt;
&lt;td align="left"&gt;ノーブランドPC3-12800-DDR3-1600-8GB x 2枚&lt;/td&gt;
&lt;td align="right"&gt;13,740円&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;HDD&lt;/td&gt;
&lt;td align="left"&gt;東芝MD04ACA300 (バルク品)&lt;/td&gt;
&lt;td align="right"&gt;10,973円&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;計&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;td align="right"&gt;34,690円&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以上が今回選んだパーツの構成です。&lt;/p&gt;
&lt;p&gt;サーバーのベンチマーク等は、今後の記事で載せていこうと思います。&lt;/p&gt;
&lt;p&gt;↓届いたパーツ&lt;/p&gt;
&lt;p&gt;&lt;a href="./images/IMG_20150408_201837-1024x768.jpg"&gt;&lt;img alt="IMG_20150408_201837" src="../images/IMG_20150408_201837-1024x768.jpg"&gt;&lt;/a&gt;
 
 &lt;/p&gt;
&lt;p&gt;↓セットアップ中のサーバー&lt;/p&gt;
&lt;p&gt;&lt;a href="./images/IMG_20150408_210434-1024x768.jpg"&gt;&lt;img alt="IMG_20150408_210434" src="../images/IMG_20150408_210434-1024x768.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="サーバー管理"></category></entry></feed>